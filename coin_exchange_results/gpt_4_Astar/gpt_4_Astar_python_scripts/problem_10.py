
import heapq

def a_star():
    # Define the initial state of the problem
    initial_state = (0, 0, 0, [])
    # Define the goal state of the problem
    goal_sum = 236
    # Define the coins and their tax values
    coins = [6, 20, 15, 14, 23, 6, 8, 15, 11, 2, 16, 21, 17, 10, 23, 20, 21, 16, 13, 3, 7, 4, 9, 21, 7, 13, 10, 18, 11, 9, 13, 12, 15, 17, 2, 8, 18, 3, 16, 9, 3, 14, 23, 16]
    tax_values = {21: 11, 18: 16, 16: 6, 12: 5, 14: 11, 11: 8, 15: 11, 4: 3, 9: 2, 23: 14, 7: 5, 20: 12, 6: 2, 8: 3, 17: 6, 13: 3, 3: 3, 2: 1, 10: 5}
    # Define the number of coins
    num_coins = len(coins)

    # Initialize a dictionary to store the cost of reaching each visited state
    visited_costs = {}
    visited_costs[initial_state] = 0

    # Initialize a priority queue of states not yet visited, with the initial state as the first element. The priority of each element is the cost to reach that state (g) + the estimate remaining cost (h) to reach the goal
    queue = [(0, 0, [], initial_state)]

    # While there are un-visited states
    while queue:
        # Pop the state with the lowest sum of the cost so far and estimated cost to the goal from the queue
        _, g, actions, state = heapq.heappop(queue)

        # We can check if the current state is the goal state with a simple equality check, as the goal state is predefined
        if state[0] == goal_sum:
            return actions

        # Generate all possible actions from the current state, which includes choosing any of the remaining coins
        for i in range(state[1], num_coins):
            # The new state is generated by adding the value of the chosen coin to the current sum, and removing the chosen coin from the list of remaining coins
            new_sum = state[0] + coins[i]
            # Check if the new state would be valid, ie if the sum of the coins does not exceed the goal sum, and if the coin chosen is smaller than the previous one, it must have an even value, otherwise, if the coin is larger than or equal to the previous coin chosen, it must have an odd value
            if new_sum <= goal_sum and (state[2] > coins[i] and coins[i] % 2 == 0 or state[2] <= coins[i] and coins[i] % 2 == 1):
                # The new state is valid, generate it
                new_state = (new_sum, i + 1, coins[i], state[3] + [coins[i]])
                # The cost so far is the sum of the tax values of the chosen coins, as our objective is to minimize the total tax paid
                new_cost = g + tax_values[coins[i]]

                # If the new state is unvisited or we found a new path with a lower cost to reach this state, add it to the queue of not-yet-visited states
                if new_state not in visited_costs or new_cost < visited_costs[new_state]:
                    visited_costs[new_state] = new_cost
                    heapq.heappush(queue, (g + heuristic(new_sum, goal_sum), new_cost, actions + [coins[i]], new_state))

    return None

def heuristic(current_sum, goal_sum):
    # An admissible and consistent heuristic for this problem is the difference between the goal sum and the current sum
    # The heuristic relaxes the constraints that the coins must be unique, that the coins must have a tax value, and that the coins must satisfy the even-odd rule, and presumes we can add any amount to the current sum to reach the goal sum
    # Thus the heuristic reports a lower estimate on the cost to reach the goal state and is admissible
    # The heuristic is consistent because the cost of choosing a coin to add to the current sum is the tax value of the coin, which is always greater than or equal to 1, the decrease in the difference between the goal sum and the current sum
    return goal_sum - current_sum

print(a_star())
