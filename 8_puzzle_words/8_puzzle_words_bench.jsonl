{"diff_sorted_id": "1", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: cam, hill, pray, doer   The initial board: [['i', 'c', 'a', 'm'], ['h', 'p', 'l', 'o'], ['_', 'r', 'a', 'y'], ['d', 'l', 'e', 'r']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.21660590171813965", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"i\", \"c\", \"a\", \"m\"], [\"h\", \"p\", \"l\", \"o\"], [\"_\", \"r\", \"a\", \"y\"], [\"d\", \"l\", \"e\", \"r\"]]]", "is_correct_args": "[[[\"i\", \"c\", \"a\", \"m\"], [\"h\", \"p\", \"l\", \"o\"], [\"_\", \"r\", \"a\", \"y\"], [\"d\", \"l\", \"e\", \"r\"]], [\"cam\", \"hill\", \"pray\", \"doer\"]]", "A*_args": "[\"[['i', 'c', 'a', 'm'], ['h', 'p', 'l', 'o'], ['_', 'r', 'a', 'y'], ['d', 'l', 'e', 'r']]\", \"['cam', 'hill', 'pray', 'doer']\"]"}
{"diff_sorted_id": "2", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: ako, pole, raff, mudd   The initial board: [['o', 'a', 'u', 'o'], ['p', 'r', 'l', 'e'], ['f', 'a', '_', 'f'], ['m', 'k', 'd', 'd']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.23615717887878418", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"o\", \"a\", \"u\", \"o\"], [\"p\", \"r\", \"l\", \"e\"], [\"f\", \"a\", \"_\", \"f\"], [\"m\", \"k\", \"d\", \"d\"]]]", "is_correct_args": "[[[\"o\", \"a\", \"u\", \"o\"], [\"p\", \"r\", \"l\", \"e\"], [\"f\", \"a\", \"_\", \"f\"], [\"m\", \"k\", \"d\", \"d\"]], [\"ako\", \"pole\", \"raff\", \"mudd\"]]", "A*_args": "[\"[['o', 'a', 'u', 'o'], ['p', 'r', 'l', 'e'], ['f', 'a', '_', 'f'], ['m', 'k', 'd', 'd']]\", \"['ako', 'pole', 'raff', 'mudd']\"]"}
{"diff_sorted_id": "3", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: twi, ovey, udic, diem   The initial board: [['v', 't', 'u', 'i'], ['o', 'w', 'e', 'i'], ['y', 'd', '_', 'c'], ['d', 'i', 'e', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.22588300704956055", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"v\", \"t\", \"u\", \"i\"], [\"o\", \"w\", \"e\", \"i\"], [\"y\", \"d\", \"_\", \"c\"], [\"d\", \"i\", \"e\", \"m\"]]]", "is_correct_args": "[[[\"v\", \"t\", \"u\", \"i\"], [\"o\", \"w\", \"e\", \"i\"], [\"y\", \"d\", \"_\", \"c\"], [\"d\", \"i\", \"e\", \"m\"]], [\"twi\", \"ovey\", \"udic\", \"diem\"]]", "A*_args": "[\"[['v', 't', 'u', 'i'], ['o', 'w', 'e', 'i'], ['y', 'd', '_', 'c'], ['d', 'i', 'e', 'm']]\", \"['twi', 'ovey', 'udic', 'diem']\"]"}
{"diff_sorted_id": "4", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: map, cere, drub, velo   The initial board: [['_', 'm', 'u', 'p'], ['c', 'e', 'r', 'a'], ['d', 'r', 'e', 'b'], ['v', 'e', 'l', 'o']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "6", "opt_solution_compute_t": "0.2581043243408203", "solution_depth": "6", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"_\", \"m\", \"u\", \"p\"], [\"c\", \"e\", \"r\", \"a\"], [\"d\", \"r\", \"e\", \"b\"], [\"v\", \"e\", \"l\", \"o\"]]]", "is_correct_args": "[[[\"_\", \"m\", \"u\", \"p\"], [\"c\", \"e\", \"r\", \"a\"], [\"d\", \"r\", \"e\", \"b\"], [\"v\", \"e\", \"l\", \"o\"]], [\"map\", \"cere\", \"drub\", \"velo\"]]", "A*_args": "[\"[['_', 'm', 'u', 'p'], ['c', 'e', 'r', 'a'], ['d', 'r', 'e', 'b'], ['v', 'e', 'l', 'o']]\", \"['map', 'cere', 'drub', 'velo']\"]"}
{"diff_sorted_id": "5", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: sax, tass, turp, cade   The initial board: [['a', 's', 't', 'x'], ['t', 'r', 's', 'a'], ['s', 'u', '_', 'p'], ['c', 'a', 'd', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "12", "opt_solution_compute_t": "0.1913444995880127", "solution_depth": "12", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"a\", \"s\", \"t\", \"x\"], [\"t\", \"r\", \"s\", \"a\"], [\"s\", \"u\", \"_\", \"p\"], [\"c\", \"a\", \"d\", \"e\"]]]", "is_correct_args": "[[[\"a\", \"s\", \"t\", \"x\"], [\"t\", \"r\", \"s\", \"a\"], [\"s\", \"u\", \"_\", \"p\"], [\"c\", \"a\", \"d\", \"e\"]], [\"sax\", \"tass\", \"turp\", \"cade\"]]", "A*_args": "[\"[['a', 's', 't', 'x'], ['t', 'r', 's', 'a'], ['s', 'u', '_', 'p'], ['c', 'a', 'd', 'e']]\", \"['sax', 'tass', 'turp', 'cade']\"]"}
{"diff_sorted_id": "6", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: cho, slod, syce, halt   The initial board: [['l', 'c', '_', 'o'], ['s', 'c', 'o', 'h'], ['d', 'y', 'a', 'e'], ['h', 's', 'l', 't']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "10", "opt_solution_compute_t": "0.16235899925231934", "solution_depth": "10", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"l\", \"c\", \"_\", \"o\"], [\"s\", \"c\", \"o\", \"h\"], [\"d\", \"y\", \"a\", \"e\"], [\"h\", \"s\", \"l\", \"t\"]]]", "is_correct_args": "[[[\"l\", \"c\", \"_\", \"o\"], [\"s\", \"c\", \"o\", \"h\"], [\"d\", \"y\", \"a\", \"e\"], [\"h\", \"s\", \"l\", \"t\"]], [\"cho\", \"slod\", \"syce\", \"halt\"]]", "A*_args": "[\"[['l', 'c', '_', 'o'], ['s', 'c', 'o', 'h'], ['d', 'y', 'a', 'e'], ['h', 's', 'l', 't']]\", \"['cho', 'slod', 'syce', 'halt']\"]"}
{"diff_sorted_id": "7", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: cry, dune, rump, knee   The initial board: [['u', 'c', 'r', 'y'], ['d', 'n', 'n', 'r'], ['_', 'u', 'm', 'p'], ['k', 'e', 'e', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.1806955337524414", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"u\", \"c\", \"r\", \"y\"], [\"d\", \"n\", \"n\", \"r\"], [\"_\", \"u\", \"m\", \"p\"], [\"k\", \"e\", \"e\", \"e\"]]]", "is_correct_args": "[[[\"u\", \"c\", \"r\", \"y\"], [\"d\", \"n\", \"n\", \"r\"], [\"_\", \"u\", \"m\", \"p\"], [\"k\", \"e\", \"e\", \"e\"]], [\"cry\", \"dune\", \"rump\", \"knee\"]]", "A*_args": "[\"[['u', 'c', 'r', 'y'], ['d', 'n', 'n', 'r'], ['_', 'u', 'm', 'p'], ['k', 'e', 'e', 'e']]\", \"['cry', 'dune', 'rump', 'knee']\"]"}
{"diff_sorted_id": "8", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: ken, khat, kill, went   The initial board: [['h', 'k', 't', 'n'], ['k', 'e', 'a', 'k'], ['e', 'i', '_', 'l'], ['w', 'l', 'n', 't']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "8", "opt_solution_compute_t": "0.16104960441589355", "solution_depth": "8", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"h\", \"k\", \"t\", \"n\"], [\"k\", \"e\", \"a\", \"k\"], [\"e\", \"i\", \"_\", \"l\"], [\"w\", \"l\", \"n\", \"t\"]]]", "is_correct_args": "[[[\"h\", \"k\", \"t\", \"n\"], [\"k\", \"e\", \"a\", \"k\"], [\"e\", \"i\", \"_\", \"l\"], [\"w\", \"l\", \"n\", \"t\"]], [\"ken\", \"khat\", \"kill\", \"went\"]]", "A*_args": "[\"[['h', 'k', 't', 'n'], ['k', 'e', 'a', 'k'], ['e', 'i', '_', 'l'], ['w', 'l', 'n', 't']]\", \"['ken', 'khat', 'kill', 'went']\"]"}
{"diff_sorted_id": "9", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: sun, quot, chat, lure   The initial board: [['_', 's', 'a', 'n'], ['q', 'u', 'o', 'u'], ['c', 'h', 'u', 't'], ['l', 't', 'r', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.14909648895263672", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"_\", \"s\", \"a\", \"n\"], [\"q\", \"u\", \"o\", \"u\"], [\"c\", \"h\", \"u\", \"t\"], [\"l\", \"t\", \"r\", \"e\"]]]", "is_correct_args": "[[[\"_\", \"s\", \"a\", \"n\"], [\"q\", \"u\", \"o\", \"u\"], [\"c\", \"h\", \"u\", \"t\"], [\"l\", \"t\", \"r\", \"e\"]], [\"sun\", \"quot\", \"chat\", \"lure\"]]", "A*_args": "[\"[['_', 's', 'a', 'n'], ['q', 'u', 'o', 'u'], ['c', 'h', 'u', 't'], ['l', 't', 'r', 'e']]\", \"['sun', 'quot', 'chat', 'lure']\"]"}
{"diff_sorted_id": "10", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: kex, turd, wabi, test   The initial board: [['u', 'k', 'd', 'x'], ['t', 'e', 'r', 'b'], ['w', 'a', '_', 'i'], ['t', 'e', 's', 't']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "4", "opt_solution_compute_t": "0.1708054542541504", "solution_depth": "4", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"u\", \"k\", \"d\", \"x\"], [\"t\", \"e\", \"r\", \"b\"], [\"w\", \"a\", \"_\", \"i\"], [\"t\", \"e\", \"s\", \"t\"]]]", "is_correct_args": "[[[\"u\", \"k\", \"d\", \"x\"], [\"t\", \"e\", \"r\", \"b\"], [\"w\", \"a\", \"_\", \"i\"], [\"t\", \"e\", \"s\", \"t\"]], [\"kex\", \"turd\", \"wabi\", \"test\"]]", "A*_args": "[\"[['u', 'k', 'd', 'x'], ['t', 'e', 'r', 'b'], ['w', 'a', '_', 'i'], ['t', 'e', 's', 't']]\", \"['kex', 'turd', 'wabi', 'test']\"]"}
{"diff_sorted_id": "11", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: bud, codo, waup, yelp   The initial board: [['o', 'b', 'e', 'd'], ['c', 'o', 'd', 'u'], ['w', 'a', '_', 'p'], ['y', 'u', 'l', 'p']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.2195606231689453", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"o\", \"b\", \"e\", \"d\"], [\"c\", \"o\", \"d\", \"u\"], [\"w\", \"a\", \"_\", \"p\"], [\"y\", \"u\", \"l\", \"p\"]]]", "is_correct_args": "[[[\"o\", \"b\", \"e\", \"d\"], [\"c\", \"o\", \"d\", \"u\"], [\"w\", \"a\", \"_\", \"p\"], [\"y\", \"u\", \"l\", \"p\"]], [\"bud\", \"codo\", \"waup\", \"yelp\"]]", "A*_args": "[\"[['o', 'b', 'e', 'd'], ['c', 'o', 'd', 'u'], ['w', 'a', '_', 'p'], ['y', 'u', 'l', 'p']]\", \"['bud', 'codo', 'waup', 'yelp']\"]"}
{"diff_sorted_id": "12", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: hat, skag, alit, mand   The initial board: [['k', 'h', 'a', 't'], ['s', 'a', 'a', 'a'], ['i', 'l', '_', 't'], ['m', 'g', 'n', 'd']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "10", "opt_solution_compute_t": "0.185685396194458", "solution_depth": "10", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"k\", \"h\", \"a\", \"t\"], [\"s\", \"a\", \"a\", \"a\"], [\"i\", \"l\", \"_\", \"t\"], [\"m\", \"g\", \"n\", \"d\"]]]", "is_correct_args": "[[[\"k\", \"h\", \"a\", \"t\"], [\"s\", \"a\", \"a\", \"a\"], [\"i\", \"l\", \"_\", \"t\"], [\"m\", \"g\", \"n\", \"d\"]], [\"hat\", \"skag\", \"alit\", \"mand\"]]", "A*_args": "[\"[['k', 'h', 'a', 't'], ['s', 'a', 'a', 'a'], ['i', 'l', '_', 't'], ['m', 'g', 'n', 'd']]\", \"['hat', 'skag', 'alit', 'mand']\"]"}
{"diff_sorted_id": "13", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: lag, abas, numa, sham   The initial board: [['b', 'l', '_', 'g'], ['a', 'n', 'a', 's'], ['m', 'u', 'a', 'a'], ['s', 'h', 'a', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.17847561836242676", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"b\", \"l\", \"_\", \"g\"], [\"a\", \"n\", \"a\", \"s\"], [\"m\", \"u\", \"a\", \"a\"], [\"s\", \"h\", \"a\", \"m\"]]]", "is_correct_args": "[[[\"b\", \"l\", \"_\", \"g\"], [\"a\", \"n\", \"a\", \"s\"], [\"m\", \"u\", \"a\", \"a\"], [\"s\", \"h\", \"a\", \"m\"]], [\"lag\", \"abas\", \"numa\", \"sham\"]]", "A*_args": "[\"[['b', 'l', '_', 'g'], ['a', 'n', 'a', 's'], ['m', 'u', 'a', 'a'], ['s', 'h', 'a', 'm']]\", \"['lag', 'abas', 'numa', 'sham']\"]"}
{"diff_sorted_id": "14", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: ann, birk, trey, bali   The initial board: [['_', 'a', 't', 'n'], ['b', 'i', 'r', 'n'], ['k', 'r', 'e', 'y'], ['b', 'a', 'l', 'i']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "12", "opt_solution_compute_t": "0.1393892765045166", "solution_depth": "12", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"_\", \"a\", \"t\", \"n\"], [\"b\", \"i\", \"r\", \"n\"], [\"k\", \"r\", \"e\", \"y\"], [\"b\", \"a\", \"l\", \"i\"]]]", "is_correct_args": "[[[\"_\", \"a\", \"t\", \"n\"], [\"b\", \"i\", \"r\", \"n\"], [\"k\", \"r\", \"e\", \"y\"], [\"b\", \"a\", \"l\", \"i\"]], [\"ann\", \"birk\", \"trey\", \"bali\"]]", "A*_args": "[\"[['_', 'a', 't', 'n'], ['b', 'i', 'r', 'n'], ['k', 'r', 'e', 'y'], ['b', 'a', 'l', 'i']]\", \"['ann', 'birk', 'trey', 'bali']\"]"}
{"diff_sorted_id": "15", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: ric, have, sgad, batz   The initial board: [['a', 'r', '_', 'c'], ['h', 'a', 'v', 'e'], ['a', 'g', 's', 'd'], ['b', 'i', 't', 'z']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.1922132968902588", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"a\", \"r\", \"_\", \"c\"], [\"h\", \"a\", \"v\", \"e\"], [\"a\", \"g\", \"s\", \"d\"], [\"b\", \"i\", \"t\", \"z\"]]]", "is_correct_args": "[[[\"a\", \"r\", \"_\", \"c\"], [\"h\", \"a\", \"v\", \"e\"], [\"a\", \"g\", \"s\", \"d\"], [\"b\", \"i\", \"t\", \"z\"]], [\"ric\", \"have\", \"sgad\", \"batz\"]]", "A*_args": "[\"[['a', 'r', '_', 'c'], ['h', 'a', 'v', 'e'], ['a', 'g', 's', 'd'], ['b', 'i', 't', 'z']]\", \"['ric', 'have', 'sgad', 'batz']\"]"}
{"diff_sorted_id": "16", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: goa, yodh, wall, acle   The initial board: [['o', 'g', 'h', 'a'], ['y', 'c', 'd', 'l'], ['o', 'a', '_', 'l'], ['a', 'w', 'l', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "8", "opt_solution_compute_t": "0.13991522789001465", "solution_depth": "8", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"o\", \"g\", \"h\", \"a\"], [\"y\", \"c\", \"d\", \"l\"], [\"o\", \"a\", \"_\", \"l\"], [\"a\", \"w\", \"l\", \"e\"]]]", "is_correct_args": "[[[\"o\", \"g\", \"h\", \"a\"], [\"y\", \"c\", \"d\", \"l\"], [\"o\", \"a\", \"_\", \"l\"], [\"a\", \"w\", \"l\", \"e\"]], [\"goa\", \"yodh\", \"wall\", \"acle\"]]", "A*_args": "[\"[['o', 'g', 'h', 'a'], ['y', 'c', 'd', 'l'], ['o', 'a', '_', 'l'], ['a', 'w', 'l', 'e']]\", \"['goa', 'yodh', 'wall', 'acle']\"]"}
{"diff_sorted_id": "17", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: hay, werf, rudd, frib   The initial board: [['e', 'h', 'r', 'y'], ['w', 'f', 'r', 'r'], ['_', 'u', 'd', 'd'], ['f', 'a', 'i', 'b']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.18766021728515625", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"e\", \"h\", \"r\", \"y\"], [\"w\", \"f\", \"r\", \"r\"], [\"_\", \"u\", \"d\", \"d\"], [\"f\", \"a\", \"i\", \"b\"]]]", "is_correct_args": "[[[\"e\", \"h\", \"r\", \"y\"], [\"w\", \"f\", \"r\", \"r\"], [\"_\", \"u\", \"d\", \"d\"], [\"f\", \"a\", \"i\", \"b\"]], [\"hay\", \"werf\", \"rudd\", \"frib\"]]", "A*_args": "[\"[['e', 'h', 'r', 'y'], ['w', 'f', 'r', 'r'], ['_', 'u', 'd', 'd'], ['f', 'a', 'i', 'b']]\", \"['hay', 'werf', 'rudd', 'frib']\"]"}
{"diff_sorted_id": "18", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: moi, good, boyd, peck   The initial board: [['o', 'm', 'y', 'i'], ['g', 'd', 'o', 'e'], ['_', 'o', 'b', 'd'], ['p', 'o', 'c', 'k']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "1", "opt_solution": "[\"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "12", "opt_solution_compute_t": "0.20071721076965332", "solution_depth": "12", "max_successor_states": "4", "num_vars_per_state": "16", "is_feasible_args": "[[[\"o\", \"m\", \"y\", \"i\"], [\"g\", \"d\", \"o\", \"e\"], [\"_\", \"o\", \"b\", \"d\"], [\"p\", \"o\", \"c\", \"k\"]]]", "is_correct_args": "[[[\"o\", \"m\", \"y\", \"i\"], [\"g\", \"d\", \"o\", \"e\"], [\"_\", \"o\", \"b\", \"d\"], [\"p\", \"o\", \"c\", \"k\"]], [\"moi\", \"good\", \"boyd\", \"peck\"]]", "A*_args": "[\"[['o', 'm', 'y', 'i'], ['g', 'd', 'o', 'e'], ['_', 'o', 'b', 'd'], ['p', 'o', 'c', 'k']]\", \"['moi', 'good', 'boyd', 'peck']\"]"}
{"diff_sorted_id": "19", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: aeon, plier, gazon, ileum   The initial board: [['l', 'a', 'e', 'o', 'n'], ['p', 'z', 'i', 'n', 'r'], ['l', 'a', 'g', 'o', '_'], ['i', 'e', 'e', 'u', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "12", "opt_solution_compute_t": "0.19801783561706543", "solution_depth": "12", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"l\", \"a\", \"e\", \"o\", \"n\"], [\"p\", \"z\", \"i\", \"n\", \"r\"], [\"l\", \"a\", \"g\", \"o\", \"_\"], [\"i\", \"e\", \"e\", \"u\", \"m\"]]]", "is_correct_args": "[[[\"l\", \"a\", \"e\", \"o\", \"n\"], [\"p\", \"z\", \"i\", \"n\", \"r\"], [\"l\", \"a\", \"g\", \"o\", \"_\"], [\"i\", \"e\", \"e\", \"u\", \"m\"]], [\"aeon\", \"plier\", \"gazon\", \"ileum\"]]", "A*_args": "[\"[['l', 'a', 'e', 'o', 'n'], ['p', 'z', 'i', 'n', 'r'], ['l', 'a', 'g', 'o', '_'], ['i', 'e', 'e', 'u', 'm']]\", \"['aeon', 'plier', 'gazon', 'ileum']\"]"}
{"diff_sorted_id": "20", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: snog, trema, mosur, awiwi   The initial board: [['r', 's', 'w', 'o', 'g'], ['t', 'n', 'e', 'm', 'a'], ['m', 'o', '_', 'u', 's'], ['a', 'w', 'i', 'r', 'i']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.2547872066497803", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"r\", \"s\", \"w\", \"o\", \"g\"], [\"t\", \"n\", \"e\", \"m\", \"a\"], [\"m\", \"o\", \"_\", \"u\", \"s\"], [\"a\", \"w\", \"i\", \"r\", \"i\"]]]", "is_correct_args": "[[[\"r\", \"s\", \"w\", \"o\", \"g\"], [\"t\", \"n\", \"e\", \"m\", \"a\"], [\"m\", \"o\", \"_\", \"u\", \"s\"], [\"a\", \"w\", \"i\", \"r\", \"i\"]], [\"snog\", \"trema\", \"mosur\", \"awiwi\"]]", "A*_args": "[\"[['r', 's', 'w', 'o', 'g'], ['t', 'n', 'e', 'm', 'a'], ['m', 'o', '_', 'u', 's'], ['a', 'w', 'i', 'r', 'i']]\", \"['snog', 'trema', 'mosur', 'awiwi']\"]"}
{"diff_sorted_id": "21", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: poss, smoke, casel, hiram   The initial board: [['m', 'p', 'l', 's', 's'], ['s', 'a', 'o', 's', 'e'], ['c', 'a', '_', 'e', 'k'], ['h', 'i', 'r', 'o', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.25868940353393555", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"m\", \"p\", \"l\", \"s\", \"s\"], [\"s\", \"a\", \"o\", \"s\", \"e\"], [\"c\", \"a\", \"_\", \"e\", \"k\"], [\"h\", \"i\", \"r\", \"o\", \"m\"]]]", "is_correct_args": "[[[\"m\", \"p\", \"l\", \"s\", \"s\"], [\"s\", \"a\", \"o\", \"s\", \"e\"], [\"c\", \"a\", \"_\", \"e\", \"k\"], [\"h\", \"i\", \"r\", \"o\", \"m\"]], [\"poss\", \"smoke\", \"casel\", \"hiram\"]]", "A*_args": "[\"[['m', 'p', 'l', 's', 's'], ['s', 'a', 'o', 's', 'e'], ['c', 'a', '_', 'e', 'k'], ['h', 'i', 'r', 'o', 'm']]\", \"['poss', 'smoke', 'casel', 'hiram']\"]"}
{"diff_sorted_id": "22", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: jehu, wormy, linty, ilial   The initial board: [['o', 'j', '_', 'h', 'u'], ['w', 'l', 'r', 'e', 'y'], ['n', 'i', 'l', 't', 'a'], ['i', 'y', 'i', 'm', 'l']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.13087821006774902", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"o\", \"j\", \"_\", \"h\", \"u\"], [\"w\", \"l\", \"r\", \"e\", \"y\"], [\"n\", \"i\", \"l\", \"t\", \"a\"], [\"i\", \"y\", \"i\", \"m\", \"l\"]]]", "is_correct_args": "[[[\"o\", \"j\", \"_\", \"h\", \"u\"], [\"w\", \"l\", \"r\", \"e\", \"y\"], [\"n\", \"i\", \"l\", \"t\", \"a\"], [\"i\", \"y\", \"i\", \"m\", \"l\"]], [\"jehu\", \"wormy\", \"linty\", \"ilial\"]]", "A*_args": "[\"[['o', 'j', '_', 'h', 'u'], ['w', 'l', 'r', 'e', 'y'], ['n', 'i', 'l', 't', 'a'], ['i', 'y', 'i', 'm', 'l']]\", \"['jehu', 'wormy', 'linty', 'ilial']\"]"}
{"diff_sorted_id": "23", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: song, amish, hiper, agley   The initial board: [['m', 's', '_', 'n', 'g'], ['a', 'o', 'i', 'e', 'h'], ['h', 'i', 'p', 'e', 's'], ['a', 'g', 'l', 'r', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "8", "opt_solution_compute_t": "0.1897449493408203", "solution_depth": "8", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"m\", \"s\", \"_\", \"n\", \"g\"], [\"a\", \"o\", \"i\", \"e\", \"h\"], [\"h\", \"i\", \"p\", \"e\", \"s\"], [\"a\", \"g\", \"l\", \"r\", \"y\"]]]", "is_correct_args": "[[[\"m\", \"s\", \"_\", \"n\", \"g\"], [\"a\", \"o\", \"i\", \"e\", \"h\"], [\"h\", \"i\", \"p\", \"e\", \"s\"], [\"a\", \"g\", \"l\", \"r\", \"y\"]], [\"song\", \"amish\", \"hiper\", \"agley\"]]", "A*_args": "[\"[['m', 's', '_', 'n', 'g'], ['a', 'o', 'i', 'e', 'h'], ['h', 'i', 'p', 'e', 's'], ['a', 'g', 'l', 'r', 'y']]\", \"['song', 'amish', 'hiper', 'agley']\"]"}
{"diff_sorted_id": "24", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: pimp, sadhe, aurir, unzen   The initial board: [['_', 'p', 'h', 'm', 'p'], ['s', 'a', 'd', 'r', 'e'], ['i', 'u', 'n', 'i', 'r'], ['u', 'a', 'z', 'e', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "8", "opt_solution_compute_t": "0.184800386428833", "solution_depth": "8", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"_\", \"p\", \"h\", \"m\", \"p\"], [\"s\", \"a\", \"d\", \"r\", \"e\"], [\"i\", \"u\", \"n\", \"i\", \"r\"], [\"u\", \"a\", \"z\", \"e\", \"n\"]]]", "is_correct_args": "[[[\"_\", \"p\", \"h\", \"m\", \"p\"], [\"s\", \"a\", \"d\", \"r\", \"e\"], [\"i\", \"u\", \"n\", \"i\", \"r\"], [\"u\", \"a\", \"z\", \"e\", \"n\"]], [\"pimp\", \"sadhe\", \"aurir\", \"unzen\"]]", "A*_args": "[\"[['_', 'p', 'h', 'm', 'p'], ['s', 'a', 'd', 'r', 'e'], ['i', 'u', 'n', 'i', 'r'], ['u', 'a', 'z', 'e', 'n']]\", \"['pimp', 'sadhe', 'aurir', 'unzen']\"]"}
{"diff_sorted_id": "25", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: guha, nisus, uncap, jough   The initial board: [['i', 'g', 'u', 'h', 'a'], ['n', 'o', 's', 'u', 's'], ['c', 'n', 'g', 'a', '_'], ['j', 'u', 'u', 'p', 'h']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "8", "opt_solution_compute_t": "0.21672630310058594", "solution_depth": "8", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"i\", \"g\", \"u\", \"h\", \"a\"], [\"n\", \"o\", \"s\", \"u\", \"s\"], [\"c\", \"n\", \"g\", \"a\", \"_\"], [\"j\", \"u\", \"u\", \"p\", \"h\"]]]", "is_correct_args": "[[[\"i\", \"g\", \"u\", \"h\", \"a\"], [\"n\", \"o\", \"s\", \"u\", \"s\"], [\"c\", \"n\", \"g\", \"a\", \"_\"], [\"j\", \"u\", \"u\", \"p\", \"h\"]], [\"guha\", \"nisus\", \"uncap\", \"jough\"]]", "A*_args": "[\"[['i', 'g', 'u', 'h', 'a'], ['n', 'o', 's', 'u', 's'], ['c', 'n', 'g', 'a', '_'], ['j', 'u', 'u', 'p', 'h']]\", \"['guha', 'nisus', 'uncap', 'jough']\"]"}
{"diff_sorted_id": "26", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: wolf, stunt, lammy, faded   The initial board: [['t', 'w', 'y', 'l', '_'], ['s', 'a', 'u', 'f', 't'], ['o', 'a', 'e', 'm', 'n'], ['f', 'l', 'd', 'm', 'd']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.2016615867614746", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"t\", \"w\", \"y\", \"l\", \"_\"], [\"s\", \"a\", \"u\", \"f\", \"t\"], [\"o\", \"a\", \"e\", \"m\", \"n\"], [\"f\", \"l\", \"d\", \"m\", \"d\"]]]", "is_correct_args": "[[[\"t\", \"w\", \"y\", \"l\", \"_\"], [\"s\", \"a\", \"u\", \"f\", \"t\"], [\"o\", \"a\", \"e\", \"m\", \"n\"], [\"f\", \"l\", \"d\", \"m\", \"d\"]], [\"wolf\", \"stunt\", \"lammy\", \"faded\"]]", "A*_args": "[\"[['t', 'w', 'y', 'l', '_'], ['s', 'a', 'u', 'f', 't'], ['o', 'a', 'e', 'm', 'n'], ['f', 'l', 'd', 'm', 'd']]\", \"['wolf', 'stunt', 'lammy', 'faded']\"]"}
{"diff_sorted_id": "27", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: bois, duroc, linen, spent   The initial board: [['_', 'b', 'p', 'i', 's'], ['d', 'u', 'r', 'n', 'c'], ['l', 'i', 'o', 'e', 'n'], ['s', 'n', 'e', 'o', 't']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-right\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.26288700103759766", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"_\", \"b\", \"p\", \"i\", \"s\"], [\"d\", \"u\", \"r\", \"n\", \"c\"], [\"l\", \"i\", \"o\", \"e\", \"n\"], [\"s\", \"n\", \"e\", \"o\", \"t\"]]]", "is_correct_args": "[[[\"_\", \"b\", \"p\", \"i\", \"s\"], [\"d\", \"u\", \"r\", \"n\", \"c\"], [\"l\", \"i\", \"o\", \"e\", \"n\"], [\"s\", \"n\", \"e\", \"o\", \"t\"]], [\"bois\", \"duroc\", \"linen\", \"spent\"]]", "A*_args": "[\"[['_', 'b', 'p', 'i', 's'], ['d', 'u', 'r', 'n', 'c'], ['l', 'i', 'o', 'e', 'n'], ['s', 'n', 'e', 'o', 't']]\", \"['bois', 'duroc', 'linen', 'spent']\"]"}
{"diff_sorted_id": "28", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: akey, haikh, trone, manto   The initial board: [['a', 'a', 'e', 'e', 'y'], ['h', 'a', 'i', 't', 'h'], ['_', 'r', 'k', 'n', 't'], ['m', 'k', 'n', 'o', 'o']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.22631430625915527", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"a\", \"a\", \"e\", \"e\", \"y\"], [\"h\", \"a\", \"i\", \"t\", \"h\"], [\"_\", \"r\", \"k\", \"n\", \"t\"], [\"m\", \"k\", \"n\", \"o\", \"o\"]]]", "is_correct_args": "[[[\"a\", \"a\", \"e\", \"e\", \"y\"], [\"h\", \"a\", \"i\", \"t\", \"h\"], [\"_\", \"r\", \"k\", \"n\", \"t\"], [\"m\", \"k\", \"n\", \"o\", \"o\"]], [\"akey\", \"haikh\", \"trone\", \"manto\"]]", "A*_args": "[\"[['a', 'a', 'e', 'e', 'y'], ['h', 'a', 'i', 't', 'h'], ['_', 'r', 'k', 'n', 't'], ['m', 'k', 'n', 'o', 'o']]\", \"['akey', 'haikh', 'trone', 'manto']\"]"}
{"diff_sorted_id": "29", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: tala, udasi, glair, wench   The initial board: [['d', 't', 's', 'l', 'a'], ['u', 'a', 'a', 'e', 'i'], ['_', 'l', 'g', 'i', 'a'], ['w', 'r', 'n', 'c', 'h']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.3418314456939697", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"d\", \"t\", \"s\", \"l\", \"a\"], [\"u\", \"a\", \"a\", \"e\", \"i\"], [\"_\", \"l\", \"g\", \"i\", \"a\"], [\"w\", \"r\", \"n\", \"c\", \"h\"]]]", "is_correct_args": "[[[\"d\", \"t\", \"s\", \"l\", \"a\"], [\"u\", \"a\", \"a\", \"e\", \"i\"], [\"_\", \"l\", \"g\", \"i\", \"a\"], [\"w\", \"r\", \"n\", \"c\", \"h\"]], [\"tala\", \"udasi\", \"glair\", \"wench\"]]", "A*_args": "[\"[['d', 't', 's', 'l', 'a'], ['u', 'a', 'a', 'e', 'i'], ['_', 'l', 'g', 'i', 'a'], ['w', 'r', 'n', 'c', 'h']]\", \"['tala', 'udasi', 'glair', 'wench']\"]"}
{"diff_sorted_id": "30", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: lete, sarus, bryan, whing   The initial board: [['a', 'l', '_', 't', 'e'], ['s', 'h', 'r', 'b', 's'], ['e', 'r', 'u', 'a', 'n'], ['w', 'y', 'i', 'n', 'g']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.23216724395751953", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"a\", \"l\", \"_\", \"t\", \"e\"], [\"s\", \"h\", \"r\", \"b\", \"s\"], [\"e\", \"r\", \"u\", \"a\", \"n\"], [\"w\", \"y\", \"i\", \"n\", \"g\"]]]", "is_correct_args": "[[[\"a\", \"l\", \"_\", \"t\", \"e\"], [\"s\", \"h\", \"r\", \"b\", \"s\"], [\"e\", \"r\", \"u\", \"a\", \"n\"], [\"w\", \"y\", \"i\", \"n\", \"g\"]], [\"lete\", \"sarus\", \"bryan\", \"whing\"]]", "A*_args": "[\"[['a', 'l', '_', 't', 'e'], ['s', 'h', 'r', 'b', 's'], ['e', 'r', 'u', 'a', 'n'], ['w', 'y', 'i', 'n', 'g']]\", \"['lete', 'sarus', 'bryan', 'whing']\"]"}
{"diff_sorted_id": "31", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: dyke, atoll, amuze, niuan   The initial board: [['t', 'd', 'u', 'k', 'e'], ['a', 'a', 'o', 'l', 'l'], ['a', 'm', '_', 'z', 'i'], ['n', 'e', 'u', 'y', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.4536299705505371", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"t\", \"d\", \"u\", \"k\", \"e\"], [\"a\", \"a\", \"o\", \"l\", \"l\"], [\"a\", \"m\", \"_\", \"z\", \"i\"], [\"n\", \"e\", \"u\", \"y\", \"n\"]]]", "is_correct_args": "[[[\"t\", \"d\", \"u\", \"k\", \"e\"], [\"a\", \"a\", \"o\", \"l\", \"l\"], [\"a\", \"m\", \"_\", \"z\", \"i\"], [\"n\", \"e\", \"u\", \"y\", \"n\"]], [\"dyke\", \"atoll\", \"amuze\", \"niuan\"]]", "A*_args": "[\"[['t', 'd', 'u', 'k', 'e'], ['a', 'a', 'o', 'l', 'l'], ['a', 'm', '_', 'z', 'i'], ['n', 'e', 'u', 'y', 'n']]\", \"['dyke', 'atoll', 'amuze', 'niuan']\"]"}
{"diff_sorted_id": "32", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: fack, sofia, nisse, nosey   The initial board: [['o', 'f', '_', 'c', 'k'], ['s', 'n', 'f', 's', 'a'], ['o', 'i', 'i', 's', 'e'], ['n', 'e', 's', 'a', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.24036526679992676", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"o\", \"f\", \"_\", \"c\", \"k\"], [\"s\", \"n\", \"f\", \"s\", \"a\"], [\"o\", \"i\", \"i\", \"s\", \"e\"], [\"n\", \"e\", \"s\", \"a\", \"y\"]]]", "is_correct_args": "[[[\"o\", \"f\", \"_\", \"c\", \"k\"], [\"s\", \"n\", \"f\", \"s\", \"a\"], [\"o\", \"i\", \"i\", \"s\", \"e\"], [\"n\", \"e\", \"s\", \"a\", \"y\"]], [\"fack\", \"sofia\", \"nisse\", \"nosey\"]]", "A*_args": "[\"[['o', 'f', '_', 'c', 'k'], ['s', 'n', 'f', 's', 'a'], ['o', 'i', 'i', 's', 'e'], ['n', 'e', 's', 'a', 'y']]\", \"['fack', 'sofia', 'nisse', 'nosey']\"]"}
{"diff_sorted_id": "33", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: jama, agoho, rudge, scruf   The initial board: [['g', 'j', 'u', 'm', 'a'], ['a', 'r', 'o', 'e', 'o'], ['h', 'u', '_', 'g', 'd'], ['s', 'c', 'r', 'a', 'f']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.28627824783325195", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"g\", \"j\", \"u\", \"m\", \"a\"], [\"a\", \"r\", \"o\", \"e\", \"o\"], [\"h\", \"u\", \"_\", \"g\", \"d\"], [\"s\", \"c\", \"r\", \"a\", \"f\"]]]", "is_correct_args": "[[[\"g\", \"j\", \"u\", \"m\", \"a\"], [\"a\", \"r\", \"o\", \"e\", \"o\"], [\"h\", \"u\", \"_\", \"g\", \"d\"], [\"s\", \"c\", \"r\", \"a\", \"f\"]], [\"jama\", \"agoho\", \"rudge\", \"scruf\"]]", "A*_args": "[\"[['g', 'j', 'u', 'm', 'a'], ['a', 'r', 'o', 'e', 'o'], ['h', 'u', '_', 'g', 'd'], ['s', 'c', 'r', 'a', 'f']]\", \"['jama', 'agoho', 'rudge', 'scruf']\"]"}
{"diff_sorted_id": "34", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: soft, tunny, apama, forum   The initial board: [['u', 's', 'o', 'f', 't'], ['t', 'a', 'n', 'n', 'y'], ['a', 'p', '_', 'm', 'o'], ['f', 'u', 'r', 'a', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.2467634677886963", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"u\", \"s\", \"o\", \"f\", \"t\"], [\"t\", \"a\", \"n\", \"n\", \"y\"], [\"a\", \"p\", \"_\", \"m\", \"o\"], [\"f\", \"u\", \"r\", \"a\", \"m\"]]]", "is_correct_args": "[[[\"u\", \"s\", \"o\", \"f\", \"t\"], [\"t\", \"a\", \"n\", \"n\", \"y\"], [\"a\", \"p\", \"_\", \"m\", \"o\"], [\"f\", \"u\", \"r\", \"a\", \"m\"]], [\"soft\", \"tunny\", \"apama\", \"forum\"]]", "A*_args": "[\"[['u', 's', 'o', 'f', 't'], ['t', 'a', 'n', 'n', 'y'], ['a', 'p', '_', 'm', 'o'], ['f', 'u', 'r', 'a', 'm']]\", \"['soft', 'tunny', 'apama', 'forum']\"]"}
{"diff_sorted_id": "35", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: supe, cadus, nucal, rouse   The initial board: [['a', 's', '_', 'p', 'e'], ['c', 'u', 'd', 'o', 's'], ['l', 'u', 'u', 'a', 's'], ['r', 'c', 'u', 'n', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.3029823303222656", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"a\", \"s\", \"_\", \"p\", \"e\"], [\"c\", \"u\", \"d\", \"o\", \"s\"], [\"l\", \"u\", \"u\", \"a\", \"s\"], [\"r\", \"c\", \"u\", \"n\", \"e\"]]]", "is_correct_args": "[[[\"a\", \"s\", \"_\", \"p\", \"e\"], [\"c\", \"u\", \"d\", \"o\", \"s\"], [\"l\", \"u\", \"u\", \"a\", \"s\"], [\"r\", \"c\", \"u\", \"n\", \"e\"]], [\"supe\", \"cadus\", \"nucal\", \"rouse\"]]", "A*_args": "[\"[['a', 's', '_', 'p', 'e'], ['c', 'u', 'd', 'o', 's'], ['l', 'u', 'u', 'a', 's'], ['r', 'c', 'u', 'n', 'e']]\", \"['supe', 'cadus', 'nucal', 'rouse']\"]"}
{"diff_sorted_id": "36", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: bath, khila, ascon, coast   The initial board: [['h', 'b', 'c', 't', 'h'], ['k', 'n', 'i', 'o', 'a'], ['a', 's', '_', 'o', 'a'], ['c', 'l', 'a', 's', 't']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-right\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.8642349243164062", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"h\", \"b\", \"c\", \"t\", \"h\"], [\"k\", \"n\", \"i\", \"o\", \"a\"], [\"a\", \"s\", \"_\", \"o\", \"a\"], [\"c\", \"l\", \"a\", \"s\", \"t\"]]]", "is_correct_args": "[[[\"h\", \"b\", \"c\", \"t\", \"h\"], [\"k\", \"n\", \"i\", \"o\", \"a\"], [\"a\", \"s\", \"_\", \"o\", \"a\"], [\"c\", \"l\", \"a\", \"s\", \"t\"]], [\"bath\", \"khila\", \"ascon\", \"coast\"]]", "A*_args": "[\"[['h', 'b', 'c', 't', 'h'], ['k', 'n', 'i', 'o', 'a'], ['a', 's', '_', 'o', 'a'], ['c', 'l', 'a', 's', 't']]\", \"['bath', 'khila', 'ascon', 'coast']\"]"}
{"diff_sorted_id": "37", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: uvate, dearie, manuka, khanum   The initial board: [['e', 'u', 'n', 'a', '_', 'e'], ['d', 'r', 'a', 'v', 'i', 'e'], ['m', 'a', 'n', 'u', 'k', 'a'], ['k', 'h', 'a', 't', 'u', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.15983343124389648", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"e\", \"u\", \"n\", \"a\", \"_\", \"e\"], [\"d\", \"r\", \"a\", \"v\", \"i\", \"e\"], [\"m\", \"a\", \"n\", \"u\", \"k\", \"a\"], [\"k\", \"h\", \"a\", \"t\", \"u\", \"m\"]]]", "is_correct_args": "[[[\"e\", \"u\", \"n\", \"a\", \"_\", \"e\"], [\"d\", \"r\", \"a\", \"v\", \"i\", \"e\"], [\"m\", \"a\", \"n\", \"u\", \"k\", \"a\"], [\"k\", \"h\", \"a\", \"t\", \"u\", \"m\"]], [\"uvate\", \"dearie\", \"manuka\", \"khanum\"]]", "A*_args": "[\"[['e', 'u', 'n', 'a', '_', 'e'], ['d', 'r', 'a', 'v', 'i', 'e'], ['m', 'a', 'n', 'u', 'k', 'a'], ['k', 'h', 'a', 't', 'u', 'm']]\", \"['uvate', 'dearie', 'manuka', 'khanum']\"]"}
{"diff_sorted_id": "38", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: nieve, astely, oecist, mewler   The initial board: [['s', 'n', '_', 'e', 'y', 'e'], ['a', 'e', 't', 'i', 'l', 'e'], ['o', 'e', 'c', 'i', 'v', 't'], ['m', 'l', 'w', 's', 'e', 'r']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.39636731147766113", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"s\", \"n\", \"_\", \"e\", \"y\", \"e\"], [\"a\", \"e\", \"t\", \"i\", \"l\", \"e\"], [\"o\", \"e\", \"c\", \"i\", \"v\", \"t\"], [\"m\", \"l\", \"w\", \"s\", \"e\", \"r\"]]]", "is_correct_args": "[[[\"s\", \"n\", \"_\", \"e\", \"y\", \"e\"], [\"a\", \"e\", \"t\", \"i\", \"l\", \"e\"], [\"o\", \"e\", \"c\", \"i\", \"v\", \"t\"], [\"m\", \"l\", \"w\", \"s\", \"e\", \"r\"]], [\"nieve\", \"astely\", \"oecist\", \"mewler\"]]", "A*_args": "[\"[['s', 'n', '_', 'e', 'y', 'e'], ['a', 'e', 't', 'i', 'l', 'e'], ['o', 'e', 'c', 'i', 'v', 't'], ['m', 'l', 'w', 's', 'e', 'r']]\", \"['nieve', 'astely', 'oecist', 'mewler']\"]"}
{"diff_sorted_id": "39", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: jibby, entone, xenium, enwomb   The initial board: [['n', 'j', '_', 'b', 'e', 'y'], ['e', 'i', 't', 'u', 'n', 'o'], ['x', 'e', 'n', 'i', 'b', 'm'], ['e', 'n', 'w', 'o', 'm', 'b']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.235795259475708", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"n\", \"j\", \"_\", \"b\", \"e\", \"y\"], [\"e\", \"i\", \"t\", \"u\", \"n\", \"o\"], [\"x\", \"e\", \"n\", \"i\", \"b\", \"m\"], [\"e\", \"n\", \"w\", \"o\", \"m\", \"b\"]]]", "is_correct_args": "[[[\"n\", \"j\", \"_\", \"b\", \"e\", \"y\"], [\"e\", \"i\", \"t\", \"u\", \"n\", \"o\"], [\"x\", \"e\", \"n\", \"i\", \"b\", \"m\"], [\"e\", \"n\", \"w\", \"o\", \"m\", \"b\"]], [\"jibby\", \"entone\", \"xenium\", \"enwomb\"]]", "A*_args": "[\"[['n', 'j', '_', 'b', 'e', 'y'], ['e', 'i', 't', 'u', 'n', 'o'], ['x', 'e', 'n', 'i', 'b', 'm'], ['e', 'n', 'w', 'o', 'm', 'b']]\", \"['jibby', 'entone', 'xenium', 'enwomb']\"]"}
{"diff_sorted_id": "40", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: nolle, yapman, pitaya, crawly   The initial board: [['a', 'n', '_', 'l', 'l', 'e'], ['y', 'p', 'p', 'o', 'a', 'n'], ['r', 'i', 'm', 'a', 'y', 'a'], ['c', 't', 'a', 'w', 'l', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "6", "opt_solution_compute_t": "0.2233717441558838", "solution_depth": "6", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"a\", \"n\", \"_\", \"l\", \"l\", \"e\"], [\"y\", \"p\", \"p\", \"o\", \"a\", \"n\"], [\"r\", \"i\", \"m\", \"a\", \"y\", \"a\"], [\"c\", \"t\", \"a\", \"w\", \"l\", \"y\"]]]", "is_correct_args": "[[[\"a\", \"n\", \"_\", \"l\", \"l\", \"e\"], [\"y\", \"p\", \"p\", \"o\", \"a\", \"n\"], [\"r\", \"i\", \"m\", \"a\", \"y\", \"a\"], [\"c\", \"t\", \"a\", \"w\", \"l\", \"y\"]], [\"nolle\", \"yapman\", \"pitaya\", \"crawly\"]]", "A*_args": "[\"[['a', 'n', '_', 'l', 'l', 'e'], ['y', 'p', 'p', 'o', 'a', 'n'], ['r', 'i', 'm', 'a', 'y', 'a'], ['c', 't', 'a', 'w', 'l', 'y']]\", \"['nolle', 'yapman', 'pitaya', 'crawly']\"]"}
{"diff_sorted_id": "41", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: alias, doocot, cerite, commie   The initial board: [['o', 'a', '_', 'i', 't', 's'], ['d', 'r', 'o', 'o', 'o', 'a'], ['c', 'e', 'm', 'i', 'l', 'e'], ['c', 'c', 'm', 't', 'i', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.3230454921722412", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"o\", \"a\", \"_\", \"i\", \"t\", \"s\"], [\"d\", \"r\", \"o\", \"o\", \"o\", \"a\"], [\"c\", \"e\", \"m\", \"i\", \"l\", \"e\"], [\"c\", \"c\", \"m\", \"t\", \"i\", \"e\"]]]", "is_correct_args": "[[[\"o\", \"a\", \"_\", \"i\", \"t\", \"s\"], [\"d\", \"r\", \"o\", \"o\", \"o\", \"a\"], [\"c\", \"e\", \"m\", \"i\", \"l\", \"e\"], [\"c\", \"c\", \"m\", \"t\", \"i\", \"e\"]], [\"alias\", \"doocot\", \"cerite\", \"commie\"]]", "A*_args": "[\"[['o', 'a', '_', 'i', 't', 's'], ['d', 'r', 'o', 'o', 'o', 'a'], ['c', 'e', 'm', 'i', 'l', 'e'], ['c', 'c', 'm', 't', 'i', 'e']]\", \"['alias', 'doocot', 'cerite', 'commie']\"]"}
{"diff_sorted_id": "42", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: jerib, zoysia, reesty, griqua   The initial board: [['_', 'j', 'a', 'r', 'e', 'b'], ['z', 'o', 'y', 's', 'i', 'i'], ['r', 'e', 'r', 's', 't', 'y'], ['g', 'e', 'i', 'q', 'u', 'a']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.27234864234924316", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"_\", \"j\", \"a\", \"r\", \"e\", \"b\"], [\"z\", \"o\", \"y\", \"s\", \"i\", \"i\"], [\"r\", \"e\", \"r\", \"s\", \"t\", \"y\"], [\"g\", \"e\", \"i\", \"q\", \"u\", \"a\"]]]", "is_correct_args": "[[[\"_\", \"j\", \"a\", \"r\", \"e\", \"b\"], [\"z\", \"o\", \"y\", \"s\", \"i\", \"i\"], [\"r\", \"e\", \"r\", \"s\", \"t\", \"y\"], [\"g\", \"e\", \"i\", \"q\", \"u\", \"a\"]], [\"jerib\", \"zoysia\", \"reesty\", \"griqua\"]]", "A*_args": "[\"[['_', 'j', 'a', 'r', 'e', 'b'], ['z', 'o', 'y', 's', 'i', 'i'], ['r', 'e', 'r', 's', 't', 'y'], ['g', 'e', 'i', 'q', 'u', 'a']]\", \"['jerib', 'zoysia', 'reesty', 'griqua']\"]"}
{"diff_sorted_id": "43", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: dione, palmad, ancona, saltly   The initial board: [['a', 'd', 'a', 'o', 'n', 'e'], ['p', 'm', 'l', 'n', 'a', 'i'], ['_', 'n', 'c', 'o', 'd', 'a'], ['s', 'a', 'l', 't', 'l', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.4346792697906494", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"a\", \"d\", \"a\", \"o\", \"n\", \"e\"], [\"p\", \"m\", \"l\", \"n\", \"a\", \"i\"], [\"_\", \"n\", \"c\", \"o\", \"d\", \"a\"], [\"s\", \"a\", \"l\", \"t\", \"l\", \"y\"]]]", "is_correct_args": "[[[\"a\", \"d\", \"a\", \"o\", \"n\", \"e\"], [\"p\", \"m\", \"l\", \"n\", \"a\", \"i\"], [\"_\", \"n\", \"c\", \"o\", \"d\", \"a\"], [\"s\", \"a\", \"l\", \"t\", \"l\", \"y\"]], [\"dione\", \"palmad\", \"ancona\", \"saltly\"]]", "A*_args": "[\"[['a', 'd', 'a', 'o', 'n', 'e'], ['p', 'm', 'l', 'n', 'a', 'i'], ['_', 'n', 'c', 'o', 'd', 'a'], ['s', 'a', 'l', 't', 'l', 'y']]\", \"['dione', 'palmad', 'ancona', 'saltly']\"]"}
{"diff_sorted_id": "44", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: besit, thrive, kincob, humate   The initial board: [['h', 'b', 'n', 's', 'i', 't'], ['t', 'e', 'r', 'k', 'v', 'e'], ['i', 'i', '_', 'c', 'o', 'b'], ['h', 'u', 'm', 'a', 't', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.3068218231201172", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"h\", \"b\", \"n\", \"s\", \"i\", \"t\"], [\"t\", \"e\", \"r\", \"k\", \"v\", \"e\"], [\"i\", \"i\", \"_\", \"c\", \"o\", \"b\"], [\"h\", \"u\", \"m\", \"a\", \"t\", \"e\"]]]", "is_correct_args": "[[[\"h\", \"b\", \"n\", \"s\", \"i\", \"t\"], [\"t\", \"e\", \"r\", \"k\", \"v\", \"e\"], [\"i\", \"i\", \"_\", \"c\", \"o\", \"b\"], [\"h\", \"u\", \"m\", \"a\", \"t\", \"e\"]], [\"besit\", \"thrive\", \"kincob\", \"humate\"]]", "A*_args": "[\"[['h', 'b', 'n', 's', 'i', 't'], ['t', 'e', 'r', 'k', 'v', 'e'], ['i', 'i', '_', 'c', 'o', 'b'], ['h', 'u', 'm', 'a', 't', 'e']]\", \"['besit', 'thrive', 'kincob', 'humate']\"]"}
{"diff_sorted_id": "45", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: khadi, swarmy, aguish, wheaty   The initial board: [['w', 'k', 'u', 'a', 'd', 'i'], ['s', 'a', 'a', 'r', 'm', 'y'], ['h', 'g', '_', 'i', 's', 'h'], ['w', 'h', 'e', 'a', 't', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.26326990127563477", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"w\", \"k\", \"u\", \"a\", \"d\", \"i\"], [\"s\", \"a\", \"a\", \"r\", \"m\", \"y\"], [\"h\", \"g\", \"_\", \"i\", \"s\", \"h\"], [\"w\", \"h\", \"e\", \"a\", \"t\", \"y\"]]]", "is_correct_args": "[[[\"w\", \"k\", \"u\", \"a\", \"d\", \"i\"], [\"s\", \"a\", \"a\", \"r\", \"m\", \"y\"], [\"h\", \"g\", \"_\", \"i\", \"s\", \"h\"], [\"w\", \"h\", \"e\", \"a\", \"t\", \"y\"]], [\"khadi\", \"swarmy\", \"aguish\", \"wheaty\"]]", "A*_args": "[\"[['w', 'k', 'u', 'a', 'd', 'i'], ['s', 'a', 'a', 'r', 'm', 'y'], ['h', 'g', '_', 'i', 's', 'h'], ['w', 'h', 'e', 'a', 't', 'y']]\", \"['khadi', 'swarmy', 'aguish', 'wheaty']\"]"}
{"diff_sorted_id": "46", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: akule, mesode, callid, gyrous   The initial board: [['e', 'a', 'y', 'u', 'i', 'e'], ['m', 'k', 's', 'o', 'd', 'l'], ['c', 'a', '_', 'l', 'e', 'd'], ['g', 'l', 'r', 'o', 'u', 's']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.27361011505126953", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"e\", \"a\", \"y\", \"u\", \"i\", \"e\"], [\"m\", \"k\", \"s\", \"o\", \"d\", \"l\"], [\"c\", \"a\", \"_\", \"l\", \"e\", \"d\"], [\"g\", \"l\", \"r\", \"o\", \"u\", \"s\"]]]", "is_correct_args": "[[[\"e\", \"a\", \"y\", \"u\", \"i\", \"e\"], [\"m\", \"k\", \"s\", \"o\", \"d\", \"l\"], [\"c\", \"a\", \"_\", \"l\", \"e\", \"d\"], [\"g\", \"l\", \"r\", \"o\", \"u\", \"s\"]], [\"akule\", \"mesode\", \"callid\", \"gyrous\"]]", "A*_args": "[\"[['e', 'a', 'y', 'u', 'i', 'e'], ['m', 'k', 's', 'o', 'd', 'l'], ['c', 'a', '_', 'l', 'e', 'd'], ['g', 'l', 'r', 'o', 'u', 's']]\", \"['akule', 'mesode', 'callid', 'gyrous']\"]"}
{"diff_sorted_id": "47", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: pongo, urchin, ondine, blinks   The initial board: [['r', 'p', '_', 'n', 'n', 'o'], ['u', 'o', 'c', 'o', 'i', 'n'], ['l', 'n', 'h', 'i', 'g', 'e'], ['b', 'd', 'i', 'n', 'k', 's']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "10", "opt_solution_compute_t": "0.1886446475982666", "solution_depth": "10", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"r\", \"p\", \"_\", \"n\", \"n\", \"o\"], [\"u\", \"o\", \"c\", \"o\", \"i\", \"n\"], [\"l\", \"n\", \"h\", \"i\", \"g\", \"e\"], [\"b\", \"d\", \"i\", \"n\", \"k\", \"s\"]]]", "is_correct_args": "[[[\"r\", \"p\", \"_\", \"n\", \"n\", \"o\"], [\"u\", \"o\", \"c\", \"o\", \"i\", \"n\"], [\"l\", \"n\", \"h\", \"i\", \"g\", \"e\"], [\"b\", \"d\", \"i\", \"n\", \"k\", \"s\"]], [\"pongo\", \"urchin\", \"ondine\", \"blinks\"]]", "A*_args": "[\"[['r', 'p', '_', 'n', 'n', 'o'], ['u', 'o', 'c', 'o', 'i', 'n'], ['l', 'n', 'h', 'i', 'g', 'e'], ['b', 'd', 'i', 'n', 'k', 's']]\", \"['pongo', 'urchin', 'ondine', 'blinks']\"]"}
{"diff_sorted_id": "48", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: added, althea, indign, patron   The initial board: [['l', 'a', 'd', 'd', 'e', 'd'], ['a', 'h', 't', 'g', 'e', 'a'], ['_', 'n', 'd', 'i', 'r', 'n'], ['p', 'a', 't', 'i', 'o', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.18565845489501953", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"l\", \"a\", \"d\", \"d\", \"e\", \"d\"], [\"a\", \"h\", \"t\", \"g\", \"e\", \"a\"], [\"_\", \"n\", \"d\", \"i\", \"r\", \"n\"], [\"p\", \"a\", \"t\", \"i\", \"o\", \"n\"]]]", "is_correct_args": "[[[\"l\", \"a\", \"d\", \"d\", \"e\", \"d\"], [\"a\", \"h\", \"t\", \"g\", \"e\", \"a\"], [\"_\", \"n\", \"d\", \"i\", \"r\", \"n\"], [\"p\", \"a\", \"t\", \"i\", \"o\", \"n\"]], [\"added\", \"althea\", \"indign\", \"patron\"]]", "A*_args": "[\"[['l', 'a', 'd', 'd', 'e', 'd'], ['a', 'h', 't', 'g', 'e', 'a'], ['_', 'n', 'd', 'i', 'r', 'n'], ['p', 'a', 't', 'i', 'o', 'n']]\", \"['added', 'althea', 'indign', 'patron']\"]"}
{"diff_sorted_id": "49", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: leath, fanman, tragic, carone   The initial board: [['a', 'l', 'o', 'a', 'm', 'h'], ['f', 'e', 'n', 'n', 'a', 't'], ['t', 'r', 'a', 'g', '_', 'c'], ['c', 'i', 'r', 'a', 'n', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "26", "opt_solution_compute_t": "1.3822917938232422", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"a\", \"l\", \"o\", \"a\", \"m\", \"h\"], [\"f\", \"e\", \"n\", \"n\", \"a\", \"t\"], [\"t\", \"r\", \"a\", \"g\", \"_\", \"c\"], [\"c\", \"i\", \"r\", \"a\", \"n\", \"e\"]]]", "is_correct_args": "[[[\"a\", \"l\", \"o\", \"a\", \"m\", \"h\"], [\"f\", \"e\", \"n\", \"n\", \"a\", \"t\"], [\"t\", \"r\", \"a\", \"g\", \"_\", \"c\"], [\"c\", \"i\", \"r\", \"a\", \"n\", \"e\"]], [\"leath\", \"fanman\", \"tragic\", \"carone\"]]", "A*_args": "[\"[['a', 'l', 'o', 'a', 'm', 'h'], ['f', 'e', 'n', 'n', 'a', 't'], ['t', 'r', 'a', 'g', '_', 'c'], ['c', 'i', 'r', 'a', 'n', 'e']]\", \"['leath', 'fanman', 'tragic', 'carone']\"]"}
{"diff_sorted_id": "50", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: humus, bywork, cereus, clarty   The initial board: [['y', 'h', 'r', 'm', '_', 's'], ['b', 'o', 'w', 'k', 'r', 'u'], ['r', 'e', 'l', 'e', 'u', 's'], ['c', 'c', 'a', 'u', 't', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.46178436279296875", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"y\", \"h\", \"r\", \"m\", \"_\", \"s\"], [\"b\", \"o\", \"w\", \"k\", \"r\", \"u\"], [\"r\", \"e\", \"l\", \"e\", \"u\", \"s\"], [\"c\", \"c\", \"a\", \"u\", \"t\", \"y\"]]]", "is_correct_args": "[[[\"y\", \"h\", \"r\", \"m\", \"_\", \"s\"], [\"b\", \"o\", \"w\", \"k\", \"r\", \"u\"], [\"r\", \"e\", \"l\", \"e\", \"u\", \"s\"], [\"c\", \"c\", \"a\", \"u\", \"t\", \"y\"]], [\"humus\", \"bywork\", \"cereus\", \"clarty\"]]", "A*_args": "[\"[['y', 'h', 'r', 'm', '_', 's'], ['b', 'o', 'w', 'k', 'r', 'u'], ['r', 'e', 'l', 'e', 'u', 's'], ['c', 'c', 'a', 'u', 't', 'y']]\", \"['humus', 'bywork', 'cereus', 'clarty']\"]"}
{"diff_sorted_id": "51", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: biune, algist, palule, noncon   The initial board: [['l', 'b', 'l', 'u', 'i', 'e'], ['a', 't', 'g', 'n', 's', 'c'], ['l', 'a', 'o', 'u', '_', 'e'], ['n', 'i', 'n', 'p', 'o', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "34", "opt_solution_compute_t": "10.377072811126709", "solution_depth": "34", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"l\", \"b\", \"l\", \"u\", \"i\", \"e\"], [\"a\", \"t\", \"g\", \"n\", \"s\", \"c\"], [\"l\", \"a\", \"o\", \"u\", \"_\", \"e\"], [\"n\", \"i\", \"n\", \"p\", \"o\", \"n\"]]]", "is_correct_args": "[[[\"l\", \"b\", \"l\", \"u\", \"i\", \"e\"], [\"a\", \"t\", \"g\", \"n\", \"s\", \"c\"], [\"l\", \"a\", \"o\", \"u\", \"_\", \"e\"], [\"n\", \"i\", \"n\", \"p\", \"o\", \"n\"]], [\"biune\", \"algist\", \"palule\", \"noncon\"]]", "A*_args": "[\"[['l', 'b', 'l', 'u', 'i', 'e'], ['a', 't', 'g', 'n', 's', 'c'], ['l', 'a', 'o', 'u', '_', 'e'], ['n', 'i', 'n', 'p', 'o', 'n']]\", \"['biune', 'algist', 'palule', 'noncon']\"]"}
{"diff_sorted_id": "52", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: saiph, lierre, accend, evenly   The initial board: [['i', 's', 'n', 'i', 'a', 'h'], ['l', 'p', 'e', 'a', 'r', 'c'], ['_', 'c', 'e', 'e', 'n', 'd'], ['e', 'v', 'e', 'r', 'l', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "38", "opt_solution_compute_t": "29.637394189834595", "solution_depth": "38", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"i\", \"s\", \"n\", \"i\", \"a\", \"h\"], [\"l\", \"p\", \"e\", \"a\", \"r\", \"c\"], [\"_\", \"c\", \"e\", \"e\", \"n\", \"d\"], [\"e\", \"v\", \"e\", \"r\", \"l\", \"y\"]]]", "is_correct_args": "[[[\"i\", \"s\", \"n\", \"i\", \"a\", \"h\"], [\"l\", \"p\", \"e\", \"a\", \"r\", \"c\"], [\"_\", \"c\", \"e\", \"e\", \"n\", \"d\"], [\"e\", \"v\", \"e\", \"r\", \"l\", \"y\"]], [\"saiph\", \"lierre\", \"accend\", \"evenly\"]]", "A*_args": "[\"[['i', 's', 'n', 'i', 'a', 'h'], ['l', 'p', 'e', 'a', 'r', 'c'], ['_', 'c', 'e', 'e', 'n', 'd'], ['e', 'v', 'e', 'r', 'l', 'y']]\", \"['saiph', 'lierre', 'accend', 'evenly']\"]"}
{"diff_sorted_id": "53", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: limen, somers, spooky, dogtie   The initial board: [['o', 'l', 's', 'm', '_', 'n'], ['s', 'o', 'm', 'e', 'r', 'k'], ['s', 'p', 'i', 'o', 'e', 'y'], ['d', 'o', 'g', 't', 'i', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.7115309238433838", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"o\", \"l\", \"s\", \"m\", \"_\", \"n\"], [\"s\", \"o\", \"m\", \"e\", \"r\", \"k\"], [\"s\", \"p\", \"i\", \"o\", \"e\", \"y\"], [\"d\", \"o\", \"g\", \"t\", \"i\", \"e\"]]]", "is_correct_args": "[[[\"o\", \"l\", \"s\", \"m\", \"_\", \"n\"], [\"s\", \"o\", \"m\", \"e\", \"r\", \"k\"], [\"s\", \"p\", \"i\", \"o\", \"e\", \"y\"], [\"d\", \"o\", \"g\", \"t\", \"i\", \"e\"]], [\"limen\", \"somers\", \"spooky\", \"dogtie\"]]", "A*_args": "[\"[['o', 'l', 's', 'm', '_', 'n'], ['s', 'o', 'm', 'e', 'r', 'k'], ['s', 'p', 'i', 'o', 'e', 'y'], ['d', 'o', 'g', 't', 'i', 'e']]\", \"['limen', 'somers', 'spooky', 'dogtie']\"]"}
{"diff_sorted_id": "54", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: unfew, brolly, bright, uproot   The initial board: [['r', 'u', 'p', 'f', 'y', 'w'], ['b', 'l', 'o', 'e', 'l', 'o'], ['n', 'r', '_', 'g', 'h', 't'], ['u', 'b', 'r', 'i', 'o', 't']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "26", "opt_solution_compute_t": "1.347020149230957", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "24", "is_feasible_args": "[[[\"r\", \"u\", \"p\", \"f\", \"y\", \"w\"], [\"b\", \"l\", \"o\", \"e\", \"l\", \"o\"], [\"n\", \"r\", \"_\", \"g\", \"h\", \"t\"], [\"u\", \"b\", \"r\", \"i\", \"o\", \"t\"]]]", "is_correct_args": "[[[\"r\", \"u\", \"p\", \"f\", \"y\", \"w\"], [\"b\", \"l\", \"o\", \"e\", \"l\", \"o\"], [\"n\", \"r\", \"_\", \"g\", \"h\", \"t\"], [\"u\", \"b\", \"r\", \"i\", \"o\", \"t\"]], [\"unfew\", \"brolly\", \"bright\", \"uproot\"]]", "A*_args": "[\"[['r', 'u', 'p', 'f', 'y', 'w'], ['b', 'l', 'o', 'e', 'l', 'o'], ['n', 'r', '_', 'g', 'h', 't'], ['u', 'b', 'r', 'i', 'o', 't']]\", \"['unfew', 'brolly', 'bright', 'uproot']\"]"}
{"diff_sorted_id": "55", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: net, toss, flip, swag, bosn   The initial board: [['o', 'n', 's', 't'], ['t', 'e', 's', 'w'], ['i', 'l', 's', 'p'], ['s', 'g', 'a', 'f'], ['b', 'o', '_', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.19336867332458496", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"o\", \"n\", \"s\", \"t\"], [\"t\", \"e\", \"s\", \"w\"], [\"i\", \"l\", \"s\", \"p\"], [\"s\", \"g\", \"a\", \"f\"], [\"b\", \"o\", \"_\", \"n\"]]]", "is_correct_args": "[[[\"o\", \"n\", \"s\", \"t\"], [\"t\", \"e\", \"s\", \"w\"], [\"i\", \"l\", \"s\", \"p\"], [\"s\", \"g\", \"a\", \"f\"], [\"b\", \"o\", \"_\", \"n\"]], [\"net\", \"toss\", \"flip\", \"swag\", \"bosn\"]]", "A*_args": "[\"[['o', 'n', 's', 't'], ['t', 'e', 's', 'w'], ['i', 'l', 's', 'p'], ['s', 'g', 'a', 'f'], ['b', 'o', '_', 'n']]\", \"['net', 'toss', 'flip', 'swag', 'bosn']\"]"}
{"diff_sorted_id": "56", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: nye, calx, hern, jaob, exam   The initial board: [['a', 'n', 'x', 'e'], ['c', 'y', 'l', 'a'], ['r', 'e', '_', 'n'], ['j', 'h', 'o', 'a'], ['e', 'x', 'b', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "12", "opt_solution_compute_t": "0.2367854118347168", "solution_depth": "12", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"a\", \"n\", \"x\", \"e\"], [\"c\", \"y\", \"l\", \"a\"], [\"r\", \"e\", \"_\", \"n\"], [\"j\", \"h\", \"o\", \"a\"], [\"e\", \"x\", \"b\", \"m\"]]]", "is_correct_args": "[[[\"a\", \"n\", \"x\", \"e\"], [\"c\", \"y\", \"l\", \"a\"], [\"r\", \"e\", \"_\", \"n\"], [\"j\", \"h\", \"o\", \"a\"], [\"e\", \"x\", \"b\", \"m\"]], [\"nye\", \"calx\", \"hern\", \"jaob\", \"exam\"]]", "A*_args": "[\"[['a', 'n', 'x', 'e'], ['c', 'y', 'l', 'a'], ['r', 'e', '_', 'n'], ['j', 'h', 'o', 'a'], ['e', 'x', 'b', 'm']]\", \"['nye', 'calx', 'hern', 'jaob', 'exam']\"]"}
{"diff_sorted_id": "57", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: toe, kuba, meng, peso, youp   The initial board: [['u', 't', '_', 'e'], ['k', 'a', 'b', 'm'], ['n', 'e', 'o', 'g'], ['p', 'u', 's', 'o'], ['y', 'o', 'e', 'p']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.5264327526092529", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"u\", \"t\", \"_\", \"e\"], [\"k\", \"a\", \"b\", \"m\"], [\"n\", \"e\", \"o\", \"g\"], [\"p\", \"u\", \"s\", \"o\"], [\"y\", \"o\", \"e\", \"p\"]]]", "is_correct_args": "[[[\"u\", \"t\", \"_\", \"e\"], [\"k\", \"a\", \"b\", \"m\"], [\"n\", \"e\", \"o\", \"g\"], [\"p\", \"u\", \"s\", \"o\"], [\"y\", \"o\", \"e\", \"p\"]], [\"toe\", \"kuba\", \"meng\", \"peso\", \"youp\"]]", "A*_args": "[\"[['u', 't', '_', 'e'], ['k', 'a', 'b', 'm'], ['n', 'e', 'o', 'g'], ['p', 'u', 's', 'o'], ['y', 'o', 'e', 'p']]\", \"['toe', 'kuba', 'meng', 'peso', 'youp']\"]"}
{"diff_sorted_id": "58", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: eld, vint, edea, poco, pirl   The initial board: [['i', 'e', 'e', 'd'], ['v', 't', 'n', 'l'], ['o', 'd', '_', 'a'], ['p', 'r', 'c', 'e'], ['p', 'i', 'o', 'l']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "10", "opt_solution_compute_t": "0.1858220100402832", "solution_depth": "10", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"i\", \"e\", \"e\", \"d\"], [\"v\", \"t\", \"n\", \"l\"], [\"o\", \"d\", \"_\", \"a\"], [\"p\", \"r\", \"c\", \"e\"], [\"p\", \"i\", \"o\", \"l\"]]]", "is_correct_args": "[[[\"i\", \"e\", \"e\", \"d\"], [\"v\", \"t\", \"n\", \"l\"], [\"o\", \"d\", \"_\", \"a\"], [\"p\", \"r\", \"c\", \"e\"], [\"p\", \"i\", \"o\", \"l\"]], [\"eld\", \"vint\", \"edea\", \"poco\", \"pirl\"]]", "A*_args": "[\"[['i', 'e', 'e', 'd'], ['v', 't', 'n', 'l'], ['o', 'd', '_', 'a'], ['p', 'r', 'c', 'e'], ['p', 'i', 'o', 'l']]\", \"['eld', 'vint', 'edea', 'poco', 'pirl']\"]"}
{"diff_sorted_id": "59", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: fae, trah, feat, fine, daff   The initial board: [['r', 'f', '_', 'e'], ['t', 'a', 'a', 'f'], ['a', 'e', 'f', 't'], ['f', 'i', 'n', 'h'], ['d', 'a', 'e', 'f']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.20941829681396484", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"r\", \"f\", \"_\", \"e\"], [\"t\", \"a\", \"a\", \"f\"], [\"a\", \"e\", \"f\", \"t\"], [\"f\", \"i\", \"n\", \"h\"], [\"d\", \"a\", \"e\", \"f\"]]]", "is_correct_args": "[[[\"r\", \"f\", \"_\", \"e\"], [\"t\", \"a\", \"a\", \"f\"], [\"a\", \"e\", \"f\", \"t\"], [\"f\", \"i\", \"n\", \"h\"], [\"d\", \"a\", \"e\", \"f\"]], [\"fae\", \"trah\", \"feat\", \"fine\", \"daff\"]]", "A*_args": "[\"[['r', 'f', '_', 'e'], ['t', 'a', 'a', 'f'], ['a', 'e', 'f', 't'], ['f', 'i', 'n', 'h'], ['d', 'a', 'e', 'f']]\", \"['fae', 'trah', 'feat', 'fine', 'daff']\"]"}
{"diff_sorted_id": "60", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: ban, zeed, dazy, mote, maun   The initial board: [['e', 'b', 'a', 'n'], ['z', 'e', 'e', 'd'], ['o', 'a', 'd', 'y'], ['m', 'u', 't', 'z'], ['m', 'a', '_', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.18634486198425293", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"e\", \"b\", \"a\", \"n\"], [\"z\", \"e\", \"e\", \"d\"], [\"o\", \"a\", \"d\", \"y\"], [\"m\", \"u\", \"t\", \"z\"], [\"m\", \"a\", \"_\", \"n\"]]]", "is_correct_args": "[[[\"e\", \"b\", \"a\", \"n\"], [\"z\", \"e\", \"e\", \"d\"], [\"o\", \"a\", \"d\", \"y\"], [\"m\", \"u\", \"t\", \"z\"], [\"m\", \"a\", \"_\", \"n\"]], [\"ban\", \"zeed\", \"dazy\", \"mote\", \"maun\"]]", "A*_args": "[\"[['e', 'b', 'a', 'n'], ['z', 'e', 'e', 'd'], ['o', 'a', 'd', 'y'], ['m', 'u', 't', 'z'], ['m', 'a', '_', 'n']]\", \"['ban', 'zeed', 'dazy', 'mote', 'maun']\"]"}
{"diff_sorted_id": "61", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: aer, hume, mimp, viva, fiji   The initial board: [['u', 'a', '_', 'r'], ['h', 'e', 'm', 'e'], ['m', 'i', 'i', 'p'], ['v', 'a', 'v', 'j'], ['f', 'i', 'm', 'i']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "12", "opt_solution_compute_t": "0.19978690147399902", "solution_depth": "12", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"u\", \"a\", \"_\", \"r\"], [\"h\", \"e\", \"m\", \"e\"], [\"m\", \"i\", \"i\", \"p\"], [\"v\", \"a\", \"v\", \"j\"], [\"f\", \"i\", \"m\", \"i\"]]]", "is_correct_args": "[[[\"u\", \"a\", \"_\", \"r\"], [\"h\", \"e\", \"m\", \"e\"], [\"m\", \"i\", \"i\", \"p\"], [\"v\", \"a\", \"v\", \"j\"], [\"f\", \"i\", \"m\", \"i\"]], [\"aer\", \"hume\", \"mimp\", \"viva\", \"fiji\"]]", "A*_args": "[\"[['u', 'a', '_', 'r'], ['h', 'e', 'm', 'e'], ['m', 'i', 'i', 'p'], ['v', 'a', 'v', 'j'], ['f', 'i', 'm', 'i']]\", \"['aer', 'hume', 'mimp', 'viva', 'fiji']\"]"}
{"diff_sorted_id": "62", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: man, cute, dazy, down, oryx   The initial board: [['u', 'm', 'a', 'n'], ['c', 'd', 't', 'e'], ['o', 'a', '_', 'y'], ['d', 'n', 'w', 'y'], ['o', 'r', 'z', 'x']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "8", "opt_solution_compute_t": "0.20729756355285645", "solution_depth": "8", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"u\", \"m\", \"a\", \"n\"], [\"c\", \"d\", \"t\", \"e\"], [\"o\", \"a\", \"_\", \"y\"], [\"d\", \"n\", \"w\", \"y\"], [\"o\", \"r\", \"z\", \"x\"]]]", "is_correct_args": "[[[\"u\", \"m\", \"a\", \"n\"], [\"c\", \"d\", \"t\", \"e\"], [\"o\", \"a\", \"_\", \"y\"], [\"d\", \"n\", \"w\", \"y\"], [\"o\", \"r\", \"z\", \"x\"]], [\"man\", \"cute\", \"dazy\", \"down\", \"oryx\"]]", "A*_args": "[\"[['u', 'm', 'a', 'n'], ['c', 'd', 't', 'e'], ['o', 'a', '_', 'y'], ['d', 'n', 'w', 'y'], ['o', 'r', 'z', 'x']]\", \"['man', 'cute', 'dazy', 'down', 'oryx']\"]"}
{"diff_sorted_id": "63", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: liz, coos, enos, coze, gast   The initial board: [['o', 'l', '_', 'z'], ['c', 'i', 'o', 's'], ['e', 'n', 'o', 's'], ['c', 'e', 'z', 'o'], ['g', 'a', 's', 't']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.22672724723815918", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"o\", \"l\", \"_\", \"z\"], [\"c\", \"i\", \"o\", \"s\"], [\"e\", \"n\", \"o\", \"s\"], [\"c\", \"e\", \"z\", \"o\"], [\"g\", \"a\", \"s\", \"t\"]]]", "is_correct_args": "[[[\"o\", \"l\", \"_\", \"z\"], [\"c\", \"i\", \"o\", \"s\"], [\"e\", \"n\", \"o\", \"s\"], [\"c\", \"e\", \"z\", \"o\"], [\"g\", \"a\", \"s\", \"t\"]], [\"liz\", \"coos\", \"enos\", \"coze\", \"gast\"]]", "A*_args": "[\"[['o', 'l', '_', 'z'], ['c', 'i', 'o', 's'], ['e', 'n', 'o', 's'], ['c', 'e', 'z', 'o'], ['g', 'a', 's', 't']]\", \"['liz', 'coos', 'enos', 'coze', 'gast']\"]"}
{"diff_sorted_id": "64", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: tue, judy, zein, bord, wiry   The initial board: [['u', 't', '_', 'e'], ['j', 'd', 'd', 'u'], ['o', 'e', 'z', 'n'], ['b', 'i', 'r', 'y'], ['w', 'i', 'r', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.3210330009460449", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"u\", \"t\", \"_\", \"e\"], [\"j\", \"d\", \"d\", \"u\"], [\"o\", \"e\", \"z\", \"n\"], [\"b\", \"i\", \"r\", \"y\"], [\"w\", \"i\", \"r\", \"y\"]]]", "is_correct_args": "[[[\"u\", \"t\", \"_\", \"e\"], [\"j\", \"d\", \"d\", \"u\"], [\"o\", \"e\", \"z\", \"n\"], [\"b\", \"i\", \"r\", \"y\"], [\"w\", \"i\", \"r\", \"y\"]], [\"tue\", \"judy\", \"zein\", \"bord\", \"wiry\"]]", "A*_args": "[\"[['u', 't', '_', 'e'], ['j', 'd', 'd', 'u'], ['o', 'e', 'z', 'n'], ['b', 'i', 'r', 'y'], ['w', 'i', 'r', 'y']]\", \"['tue', 'judy', 'zein', 'bord', 'wiry']\"]"}
{"diff_sorted_id": "65", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: ned, wham, royt, hell, miek   The initial board: [['h', 'n', '_', 'd'], ['w', 'r', 'a', 'e'], ['e', 'o', 'y', 't'], ['h', 'e', 'l', 'm'], ['m', 'i', 'l', 'k']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.29477596282958984", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"h\", \"n\", \"_\", \"d\"], [\"w\", \"r\", \"a\", \"e\"], [\"e\", \"o\", \"y\", \"t\"], [\"h\", \"e\", \"l\", \"m\"], [\"m\", \"i\", \"l\", \"k\"]]]", "is_correct_args": "[[[\"h\", \"n\", \"_\", \"d\"], [\"w\", \"r\", \"a\", \"e\"], [\"e\", \"o\", \"y\", \"t\"], [\"h\", \"e\", \"l\", \"m\"], [\"m\", \"i\", \"l\", \"k\"]], [\"ned\", \"wham\", \"royt\", \"hell\", \"miek\"]]", "A*_args": "[\"[['h', 'n', '_', 'd'], ['w', 'r', 'a', 'e'], ['e', 'o', 'y', 't'], ['h', 'e', 'l', 'm'], ['m', 'i', 'l', 'k']]\", \"['ned', 'wham', 'royt', 'hell', 'miek']\"]"}
{"diff_sorted_id": "66", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: jay, eppy, home, roon, ward   The initial board: [['p', 'j', 'm', 'y'], ['e', 'h', 'p', 'o'], ['y', 'o', '_', 'e'], ['r', 'a', 'o', 'n'], ['w', 'a', 'r', 'd']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.16893219947814941", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"p\", \"j\", \"m\", \"y\"], [\"e\", \"h\", \"p\", \"o\"], [\"y\", \"o\", \"_\", \"e\"], [\"r\", \"a\", \"o\", \"n\"], [\"w\", \"a\", \"r\", \"d\"]]]", "is_correct_args": "[[[\"p\", \"j\", \"m\", \"y\"], [\"e\", \"h\", \"p\", \"o\"], [\"y\", \"o\", \"_\", \"e\"], [\"r\", \"a\", \"o\", \"n\"], [\"w\", \"a\", \"r\", \"d\"]], [\"jay\", \"eppy\", \"home\", \"roon\", \"ward\"]]", "A*_args": "[\"[['p', 'j', 'm', 'y'], ['e', 'h', 'p', 'o'], ['y', 'o', '_', 'e'], ['r', 'a', 'o', 'n'], ['w', 'a', 'r', 'd']]\", \"['jay', 'eppy', 'home', 'roon', 'ward']\"]"}
{"diff_sorted_id": "67", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: lew, keck, flea, susu, herb   The initial board: [['e', 'l', 'u', 'w'], ['k', 'k', 'c', 'e'], ['f', 'l', '_', 'a'], ['s', 'r', 's', 'e'], ['h', 'e', 'u', 'b']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.2113971710205078", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"e\", \"l\", \"u\", \"w\"], [\"k\", \"k\", \"c\", \"e\"], [\"f\", \"l\", \"_\", \"a\"], [\"s\", \"r\", \"s\", \"e\"], [\"h\", \"e\", \"u\", \"b\"]]]", "is_correct_args": "[[[\"e\", \"l\", \"u\", \"w\"], [\"k\", \"k\", \"c\", \"e\"], [\"f\", \"l\", \"_\", \"a\"], [\"s\", \"r\", \"s\", \"e\"], [\"h\", \"e\", \"u\", \"b\"]], [\"lew\", \"keck\", \"flea\", \"susu\", \"herb\"]]", "A*_args": "[\"[['e', 'l', 'u', 'w'], ['k', 'k', 'c', 'e'], ['f', 'l', '_', 'a'], ['s', 'r', 's', 'e'], ['h', 'e', 'u', 'b']]\", \"['lew', 'keck', 'flea', 'susu', 'herb']\"]"}
{"diff_sorted_id": "68", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: sat, leep, mack, pogo, drew   The initial board: [['e', 's', '_', 't'], ['l', 'o', 'e', 'm'], ['c', 'a', 'o', 'k'], ['p', 'p', 'g', 'e'], ['d', 'r', 'a', 'w']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.2691648006439209", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"e\", \"s\", \"_\", \"t\"], [\"l\", \"o\", \"e\", \"m\"], [\"c\", \"a\", \"o\", \"k\"], [\"p\", \"p\", \"g\", \"e\"], [\"d\", \"r\", \"a\", \"w\"]]]", "is_correct_args": "[[[\"e\", \"s\", \"_\", \"t\"], [\"l\", \"o\", \"e\", \"m\"], [\"c\", \"a\", \"o\", \"k\"], [\"p\", \"p\", \"g\", \"e\"], [\"d\", \"r\", \"a\", \"w\"]], [\"sat\", \"leep\", \"mack\", \"pogo\", \"drew\"]]", "A*_args": "[\"[['e', 's', '_', 't'], ['l', 'o', 'e', 'm'], ['c', 'a', 'o', 'k'], ['p', 'p', 'g', 'e'], ['d', 'r', 'a', 'w']]\", \"['sat', 'leep', 'mack', 'pogo', 'drew']\"]"}
{"diff_sorted_id": "69", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: orc, icho, dear, four, peai   The initial board: [['c', 'o', 'a', 'c'], ['i', 'o', 'h', 'r'], ['d', 'e', 'r', 'r'], ['f', 'o', 'u', 'a'], ['p', 'e', '_', 'i']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"up-right\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "8", "opt_solution_compute_t": "0.19328975677490234", "solution_depth": "8", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"c\", \"o\", \"a\", \"c\"], [\"i\", \"o\", \"h\", \"r\"], [\"d\", \"e\", \"r\", \"r\"], [\"f\", \"o\", \"u\", \"a\"], [\"p\", \"e\", \"_\", \"i\"]]]", "is_correct_args": "[[[\"c\", \"o\", \"a\", \"c\"], [\"i\", \"o\", \"h\", \"r\"], [\"d\", \"e\", \"r\", \"r\"], [\"f\", \"o\", \"u\", \"a\"], [\"p\", \"e\", \"_\", \"i\"]], [\"orc\", \"icho\", \"dear\", \"four\", \"peai\"]]", "A*_args": "[\"[['c', 'o', 'a', 'c'], ['i', 'o', 'h', 'r'], ['d', 'e', 'r', 'r'], ['f', 'o', 'u', 'a'], ['p', 'e', '_', 'i']]\", \"['orc', 'icho', 'dear', 'four', 'peai']\"]"}
{"diff_sorted_id": "70", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: map, pahi, yeel, vial, wusp   The initial board: [['a', 'm', '_', 'p'], ['p', 'e', 'h', 'a'], ['l', 'e', 'y', 'l'], ['v', 'i', 'a', 'i'], ['w', 'u', 's', 'p']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.2252347469329834", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"a\", \"m\", \"_\", \"p\"], [\"p\", \"e\", \"h\", \"a\"], [\"l\", \"e\", \"y\", \"l\"], [\"v\", \"i\", \"a\", \"i\"], [\"w\", \"u\", \"s\", \"p\"]]]", "is_correct_args": "[[[\"a\", \"m\", \"_\", \"p\"], [\"p\", \"e\", \"h\", \"a\"], [\"l\", \"e\", \"y\", \"l\"], [\"v\", \"i\", \"a\", \"i\"], [\"w\", \"u\", \"s\", \"p\"]], [\"map\", \"pahi\", \"yeel\", \"vial\", \"wusp\"]]", "A*_args": "[\"[['a', 'm', '_', 'p'], ['p', 'e', 'h', 'a'], ['l', 'e', 'y', 'l'], ['v', 'i', 'a', 'i'], ['w', 'u', 's', 'p']]\", \"['map', 'pahi', 'yeel', 'vial', 'wusp']\"]"}
{"diff_sorted_id": "71", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: nab, gull, book, talc, flob   The initial board: [['u', 'n', 'a', 'b'], ['g', 'b', 'l', 'l'], ['a', 'o', '_', 'k'], ['t', 'o', 'l', 'c'], ['f', 'l', 'o', 'b']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "4", "opt_solution_compute_t": "0.1806783676147461", "solution_depth": "4", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"u\", \"n\", \"a\", \"b\"], [\"g\", \"b\", \"l\", \"l\"], [\"a\", \"o\", \"_\", \"k\"], [\"t\", \"o\", \"l\", \"c\"], [\"f\", \"l\", \"o\", \"b\"]]]", "is_correct_args": "[[[\"u\", \"n\", \"a\", \"b\"], [\"g\", \"b\", \"l\", \"l\"], [\"a\", \"o\", \"_\", \"k\"], [\"t\", \"o\", \"l\", \"c\"], [\"f\", \"l\", \"o\", \"b\"]], [\"nab\", \"gull\", \"book\", \"talc\", \"flob\"]]", "A*_args": "[\"[['u', 'n', 'a', 'b'], ['g', 'b', 'l', 'l'], ['a', 'o', '_', 'k'], ['t', 'o', 'l', 'c'], ['f', 'l', 'o', 'b']]\", \"['nab', 'gull', 'book', 'talc', 'flob']\"]"}
{"diff_sorted_id": "72", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: lit, poor, kirk, cake, slam   The initial board: [['o', 'l', '_', 't'], ['p', 'r', 'o', 'a'], ['e', 'i', 'k', 'k'], ['c', 'i', 'k', 'a'], ['s', 'l', 'r', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[\"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.3410513401031494", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "20", "is_feasible_args": "[[[\"o\", \"l\", \"_\", \"t\"], [\"p\", \"r\", \"o\", \"a\"], [\"e\", \"i\", \"k\", \"k\"], [\"c\", \"i\", \"k\", \"a\"], [\"s\", \"l\", \"r\", \"m\"]]]", "is_correct_args": "[[[\"o\", \"l\", \"_\", \"t\"], [\"p\", \"r\", \"o\", \"a\"], [\"e\", \"i\", \"k\", \"k\"], [\"c\", \"i\", \"k\", \"a\"], [\"s\", \"l\", \"r\", \"m\"]], [\"lit\", \"poor\", \"kirk\", \"cake\", \"slam\"]]", "A*_args": "[\"[['o', 'l', '_', 't'], ['p', 'r', 'o', 'a'], ['e', 'i', 'k', 'k'], ['c', 'i', 'k', 'a'], ['s', 'l', 'r', 'm']]\", \"['lit', 'poor', 'kirk', 'cake', 'slam']\"]"}
{"diff_sorted_id": "73", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: trag, hoped, shelf, neath, farse   The initial board: [['o', 't', 'f', 'a', 'g'], ['h', 'r', 'p', 'r', 'd'], ['s', 'h', '_', 'l', 't'], ['n', 'e', 'a', 'e', 'h'], ['f', 'a', 'e', 's', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.3264577388763428", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"o\", \"t\", \"f\", \"a\", \"g\"], [\"h\", \"r\", \"p\", \"r\", \"d\"], [\"s\", \"h\", \"_\", \"l\", \"t\"], [\"n\", \"e\", \"a\", \"e\", \"h\"], [\"f\", \"a\", \"e\", \"s\", \"e\"]]]", "is_correct_args": "[[[\"o\", \"t\", \"f\", \"a\", \"g\"], [\"h\", \"r\", \"p\", \"r\", \"d\"], [\"s\", \"h\", \"_\", \"l\", \"t\"], [\"n\", \"e\", \"a\", \"e\", \"h\"], [\"f\", \"a\", \"e\", \"s\", \"e\"]], [\"trag\", \"hoped\", \"shelf\", \"neath\", \"farse\"]]", "A*_args": "[\"[['o', 't', 'f', 'a', 'g'], ['h', 'r', 'p', 'r', 'd'], ['s', 'h', '_', 'l', 't'], ['n', 'e', 'a', 'e', 'h'], ['f', 'a', 'e', 's', 'e']]\", \"['trag', 'hoped', 'shelf', 'neath', 'farse']\"]"}
{"diff_sorted_id": "74", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: zeta, sumac, showy, smeek, ajava   The initial board: [['u', 'z', 's', 't', 'a'], ['s', 'e', 'm', 'o', 'c'], ['a', 'h', '_', 'w', 'y'], ['s', 'a', 'e', 'm', 'k'], ['a', 'j', 'e', 'v', 'a']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.29548144340515137", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"u\", \"z\", \"s\", \"t\", \"a\"], [\"s\", \"e\", \"m\", \"o\", \"c\"], [\"a\", \"h\", \"_\", \"w\", \"y\"], [\"s\", \"a\", \"e\", \"m\", \"k\"], [\"a\", \"j\", \"e\", \"v\", \"a\"]]]", "is_correct_args": "[[[\"u\", \"z\", \"s\", \"t\", \"a\"], [\"s\", \"e\", \"m\", \"o\", \"c\"], [\"a\", \"h\", \"_\", \"w\", \"y\"], [\"s\", \"a\", \"e\", \"m\", \"k\"], [\"a\", \"j\", \"e\", \"v\", \"a\"]], [\"zeta\", \"sumac\", \"showy\", \"smeek\", \"ajava\"]]", "A*_args": "[\"[['u', 'z', 's', 't', 'a'], ['s', 'e', 'm', 'o', 'c'], ['a', 'h', '_', 'w', 'y'], ['s', 'a', 'e', 'm', 'k'], ['a', 'j', 'e', 'v', 'a']]\", \"['zeta', 'sumac', 'showy', 'smeek', 'ajava']\"]"}
{"diff_sorted_id": "75", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: soho, rilly, josip, drain, nival   The initial board: [['_', 's', 's', 'h', 'o'], ['r', 'i', 'l', 'o', 'y'], ['j', 'o', 'l', 'i', 'p'], ['d', 'r', 'a', 'i', 'n'], ['n', 'i', 'v', 'a', 'l']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "6", "opt_solution_compute_t": "0.19606399536132812", "solution_depth": "6", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"_\", \"s\", \"s\", \"h\", \"o\"], [\"r\", \"i\", \"l\", \"o\", \"y\"], [\"j\", \"o\", \"l\", \"i\", \"p\"], [\"d\", \"r\", \"a\", \"i\", \"n\"], [\"n\", \"i\", \"v\", \"a\", \"l\"]]]", "is_correct_args": "[[[\"_\", \"s\", \"s\", \"h\", \"o\"], [\"r\", \"i\", \"l\", \"o\", \"y\"], [\"j\", \"o\", \"l\", \"i\", \"p\"], [\"d\", \"r\", \"a\", \"i\", \"n\"], [\"n\", \"i\", \"v\", \"a\", \"l\"]], [\"soho\", \"rilly\", \"josip\", \"drain\", \"nival\"]]", "A*_args": "[\"[['_', 's', 's', 'h', 'o'], ['r', 'i', 'l', 'o', 'y'], ['j', 'o', 'l', 'i', 'p'], ['d', 'r', 'a', 'i', 'n'], ['n', 'i', 'v', 'a', 'l']]\", \"['soho', 'rilly', 'josip', 'drain', 'nival']\"]"}
{"diff_sorted_id": "76", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: quad, bhang, decay, honor, picky   The initial board: [['h', 'q', 'n', 'a', '_'], ['b', 'y', 'a', 'd', 'g'], ['d', 'e', 'c', 'a', 'o'], ['h', 'o', 'n', 'u', 'r'], ['p', 'i', 'c', 'k', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.18000054359436035", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"h\", \"q\", \"n\", \"a\", \"_\"], [\"b\", \"y\", \"a\", \"d\", \"g\"], [\"d\", \"e\", \"c\", \"a\", \"o\"], [\"h\", \"o\", \"n\", \"u\", \"r\"], [\"p\", \"i\", \"c\", \"k\", \"y\"]]]", "is_correct_args": "[[[\"h\", \"q\", \"n\", \"a\", \"_\"], [\"b\", \"y\", \"a\", \"d\", \"g\"], [\"d\", \"e\", \"c\", \"a\", \"o\"], [\"h\", \"o\", \"n\", \"u\", \"r\"], [\"p\", \"i\", \"c\", \"k\", \"y\"]], [\"quad\", \"bhang\", \"decay\", \"honor\", \"picky\"]]", "A*_args": "[\"[['h', 'q', 'n', 'a', '_'], ['b', 'y', 'a', 'd', 'g'], ['d', 'e', 'c', 'a', 'o'], ['h', 'o', 'n', 'u', 'r'], ['p', 'i', 'c', 'k', 'y']]\", \"['quad', 'bhang', 'decay', 'honor', 'picky']\"]"}
{"diff_sorted_id": "77", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: gong, clown, brent, dewax, thorp   The initial board: [['l', 'g', 'a', 'n', 'g'], ['c', 'o', 'o', 'e', 'n'], ['e', 'r', '_', 'n', 't'], ['d', 'b', 'w', 'o', 'x'], ['t', 'h', 'w', 'r', 'p']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.6303999423980713", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"l\", \"g\", \"a\", \"n\", \"g\"], [\"c\", \"o\", \"o\", \"e\", \"n\"], [\"e\", \"r\", \"_\", \"n\", \"t\"], [\"d\", \"b\", \"w\", \"o\", \"x\"], [\"t\", \"h\", \"w\", \"r\", \"p\"]]]", "is_correct_args": "[[[\"l\", \"g\", \"a\", \"n\", \"g\"], [\"c\", \"o\", \"o\", \"e\", \"n\"], [\"e\", \"r\", \"_\", \"n\", \"t\"], [\"d\", \"b\", \"w\", \"o\", \"x\"], [\"t\", \"h\", \"w\", \"r\", \"p\"]], [\"gong\", \"clown\", \"brent\", \"dewax\", \"thorp\"]]", "A*_args": "[\"[['l', 'g', 'a', 'n', 'g'], ['c', 'o', 'o', 'e', 'n'], ['e', 'r', '_', 'n', 't'], ['d', 'b', 'w', 'o', 'x'], ['t', 'h', 'w', 'r', 'p']]\", \"['gong', 'clown', 'brent', 'dewax', 'thorp']\"]"}
{"diff_sorted_id": "78", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: jake, tawse, trypa, smash, creep   The initial board: [['a', 'j', '_', 'k', 'e'], ['t', 's', 'w', 'y', 'e'], ['t', 'r', 'a', 'p', 'a'], ['s', 'e', 'a', 'm', 'h'], ['c', 'r', 's', 'e', 'p']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "10", "opt_solution_compute_t": "0.18477082252502441", "solution_depth": "10", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"a\", \"j\", \"_\", \"k\", \"e\"], [\"t\", \"s\", \"w\", \"y\", \"e\"], [\"t\", \"r\", \"a\", \"p\", \"a\"], [\"s\", \"e\", \"a\", \"m\", \"h\"], [\"c\", \"r\", \"s\", \"e\", \"p\"]]]", "is_correct_args": "[[[\"a\", \"j\", \"_\", \"k\", \"e\"], [\"t\", \"s\", \"w\", \"y\", \"e\"], [\"t\", \"r\", \"a\", \"p\", \"a\"], [\"s\", \"e\", \"a\", \"m\", \"h\"], [\"c\", \"r\", \"s\", \"e\", \"p\"]], [\"jake\", \"tawse\", \"trypa\", \"smash\", \"creep\"]]", "A*_args": "[\"[['a', 'j', '_', 'k', 'e'], ['t', 's', 'w', 'y', 'e'], ['t', 'r', 'a', 'p', 'a'], ['s', 'e', 'a', 'm', 'h'], ['c', 'r', 's', 'e', 'p']]\", \"['jake', 'tawse', 'trypa', 'smash', 'creep']\"]"}
{"diff_sorted_id": "79", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: siva, bryce, birny, pugil, linne   The initial board: [['r', 's', 'c', 'v', 'a'], ['b', 'b', 'y', 'r', 'e'], ['u', 'i', '_', 'n', 'i'], ['p', 'n', 'g', 'i', 'l'], ['l', 'i', 'y', 'n', 'e']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.3119840621948242", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"r\", \"s\", \"c\", \"v\", \"a\"], [\"b\", \"b\", \"y\", \"r\", \"e\"], [\"u\", \"i\", \"_\", \"n\", \"i\"], [\"p\", \"n\", \"g\", \"i\", \"l\"], [\"l\", \"i\", \"y\", \"n\", \"e\"]]]", "is_correct_args": "[[[\"r\", \"s\", \"c\", \"v\", \"a\"], [\"b\", \"b\", \"y\", \"r\", \"e\"], [\"u\", \"i\", \"_\", \"n\", \"i\"], [\"p\", \"n\", \"g\", \"i\", \"l\"], [\"l\", \"i\", \"y\", \"n\", \"e\"]], [\"siva\", \"bryce\", \"birny\", \"pugil\", \"linne\"]]", "A*_args": "[\"[['r', 's', 'c', 'v', 'a'], ['b', 'b', 'y', 'r', 'e'], ['u', 'i', '_', 'n', 'i'], ['p', 'n', 'g', 'i', 'l'], ['l', 'i', 'y', 'n', 'e']]\", \"['siva', 'bryce', 'birny', 'pugil', 'linne']\"]"}
{"diff_sorted_id": "80", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: welt, eddic, equip, macer, yurta   The initial board: [['d', 'w', 'p', 'l', 't'], ['e', 'i', 'd', 'e', 'c'], ['_', 'q', 'e', 'i', 'r'], ['m', 'e', 'c', 'u', 'r'], ['y', 'u', 'a', 't', 'a']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.22876906394958496", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"d\", \"w\", \"p\", \"l\", \"t\"], [\"e\", \"i\", \"d\", \"e\", \"c\"], [\"_\", \"q\", \"e\", \"i\", \"r\"], [\"m\", \"e\", \"c\", \"u\", \"r\"], [\"y\", \"u\", \"a\", \"t\", \"a\"]]]", "is_correct_args": "[[[\"d\", \"w\", \"p\", \"l\", \"t\"], [\"e\", \"i\", \"d\", \"e\", \"c\"], [\"_\", \"q\", \"e\", \"i\", \"r\"], [\"m\", \"e\", \"c\", \"u\", \"r\"], [\"y\", \"u\", \"a\", \"t\", \"a\"]], [\"welt\", \"eddic\", \"equip\", \"macer\", \"yurta\"]]", "A*_args": "[\"[['d', 'w', 'p', 'l', 't'], ['e', 'i', 'd', 'e', 'c'], ['_', 'q', 'e', 'i', 'r'], ['m', 'e', 'c', 'u', 'r'], ['y', 'u', 'a', 't', 'a']]\", \"['welt', 'eddic', 'equip', 'macer', 'yurta']\"]"}
{"diff_sorted_id": "81", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: core, reuel, rinch, kizil, iztle   The initial board: [['e', 'c', 'o', 'r', 'e'], ['r', 'e', 'u', 't', 'l'], ['r', 'i', 'i', 'c', 'i'], ['k', 'n', 'z', 'e', 'l'], ['i', 'z', 'h', 'l', '_']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "24", "opt_solution_compute_t": "1.593846082687378", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"e\", \"c\", \"o\", \"r\", \"e\"], [\"r\", \"e\", \"u\", \"t\", \"l\"], [\"r\", \"i\", \"i\", \"c\", \"i\"], [\"k\", \"n\", \"z\", \"e\", \"l\"], [\"i\", \"z\", \"h\", \"l\", \"_\"]]]", "is_correct_args": "[[[\"e\", \"c\", \"o\", \"r\", \"e\"], [\"r\", \"e\", \"u\", \"t\", \"l\"], [\"r\", \"i\", \"i\", \"c\", \"i\"], [\"k\", \"n\", \"z\", \"e\", \"l\"], [\"i\", \"z\", \"h\", \"l\", \"_\"]], [\"core\", \"reuel\", \"rinch\", \"kizil\", \"iztle\"]]", "A*_args": "[\"[['e', 'c', 'o', 'r', 'e'], ['r', 'e', 'u', 't', 'l'], ['r', 'i', 'i', 'c', 'i'], ['k', 'n', 'z', 'e', 'l'], ['i', 'z', 'h', 'l', '_']]\", \"['core', 'reuel', 'rinch', 'kizil', 'iztle']\"]"}
{"diff_sorted_id": "82", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: ekka, bifer, magma, dinka, brett   The initial board: [['i', 'e', 'k', 'k', 'a'], ['b', 'e', 'f', 'a', 'r'], ['g', 'a', '_', 'm', 'e'], ['d', 'i', 'n', 'k', 'a'], ['b', 'r', 'm', 't', 't']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.7136387825012207", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"i\", \"e\", \"k\", \"k\", \"a\"], [\"b\", \"e\", \"f\", \"a\", \"r\"], [\"g\", \"a\", \"_\", \"m\", \"e\"], [\"d\", \"i\", \"n\", \"k\", \"a\"], [\"b\", \"r\", \"m\", \"t\", \"t\"]]]", "is_correct_args": "[[[\"i\", \"e\", \"k\", \"k\", \"a\"], [\"b\", \"e\", \"f\", \"a\", \"r\"], [\"g\", \"a\", \"_\", \"m\", \"e\"], [\"d\", \"i\", \"n\", \"k\", \"a\"], [\"b\", \"r\", \"m\", \"t\", \"t\"]], [\"ekka\", \"bifer\", \"magma\", \"dinka\", \"brett\"]]", "A*_args": "[\"[['i', 'e', 'k', 'k', 'a'], ['b', 'e', 'f', 'a', 'r'], ['g', 'a', '_', 'm', 'e'], ['d', 'i', 'n', 'k', 'a'], ['b', 'r', 'm', 't', 't']]\", \"['ekka', 'bifer', 'magma', 'dinka', 'brett']\"]"}
{"diff_sorted_id": "83", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: rane, sures, liber, bikol, skaff   The initial board: [['u', 'r', 'a', 'n', 'e'], ['s', 'l', 'r', 'i', 's'], ['a', 'i', '_', 'e', 'e'], ['b', 'o', 'k', 'b', 'l'], ['s', 'k', 'r', 'f', 'f']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.2462632656097412", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"u\", \"r\", \"a\", \"n\", \"e\"], [\"s\", \"l\", \"r\", \"i\", \"s\"], [\"a\", \"i\", \"_\", \"e\", \"e\"], [\"b\", \"o\", \"k\", \"b\", \"l\"], [\"s\", \"k\", \"r\", \"f\", \"f\"]]]", "is_correct_args": "[[[\"u\", \"r\", \"a\", \"n\", \"e\"], [\"s\", \"l\", \"r\", \"i\", \"s\"], [\"a\", \"i\", \"_\", \"e\", \"e\"], [\"b\", \"o\", \"k\", \"b\", \"l\"], [\"s\", \"k\", \"r\", \"f\", \"f\"]], [\"rane\", \"sures\", \"liber\", \"bikol\", \"skaff\"]]", "A*_args": "[\"[['u', 'r', 'a', 'n', 'e'], ['s', 'l', 'r', 'i', 's'], ['a', 'i', '_', 'e', 'e'], ['b', 'o', 'k', 'b', 'l'], ['s', 'k', 'r', 'f', 'f']]\", \"['rane', 'sures', 'liber', 'bikol', 'skaff']\"]"}
{"diff_sorted_id": "84", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: roto, serer, tapas, dinka, desex   The initial board: [['e', 'r', 'p', 't', 'o'], ['s', 't', 'r', 'k', 'r'], ['e', 'a', '_', 'a', 'i'], ['d', 'o', 'n', 's', 'a'], ['d', 'e', 's', 'e', 'x']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.3263390064239502", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"e\", \"r\", \"p\", \"t\", \"o\"], [\"s\", \"t\", \"r\", \"k\", \"r\"], [\"e\", \"a\", \"_\", \"a\", \"i\"], [\"d\", \"o\", \"n\", \"s\", \"a\"], [\"d\", \"e\", \"s\", \"e\", \"x\"]]]", "is_correct_args": "[[[\"e\", \"r\", \"p\", \"t\", \"o\"], [\"s\", \"t\", \"r\", \"k\", \"r\"], [\"e\", \"a\", \"_\", \"a\", \"i\"], [\"d\", \"o\", \"n\", \"s\", \"a\"], [\"d\", \"e\", \"s\", \"e\", \"x\"]], [\"roto\", \"serer\", \"tapas\", \"dinka\", \"desex\"]]", "A*_args": "[\"[['e', 'r', 'p', 't', 'o'], ['s', 't', 'r', 'k', 'r'], ['e', 'a', '_', 'a', 'i'], ['d', 'o', 'n', 's', 'a'], ['d', 'e', 's', 'e', 'x']]\", \"['roto', 'serer', 'tapas', 'dinka', 'desex']\"]"}
{"diff_sorted_id": "85", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: snip, scoon, cuber, artie, penta   The initial board: [['c', 's', 'n', 'i', 'p'], ['s', 'o', 'o', 'r', 'n'], ['c', 'u', 'i', 'e', '_'], ['a', 'n', 't', 'b', 'e'], ['p', 'e', 'r', 't', 'a']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "1.548938512802124", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"c\", \"s\", \"n\", \"i\", \"p\"], [\"s\", \"o\", \"o\", \"r\", \"n\"], [\"c\", \"u\", \"i\", \"e\", \"_\"], [\"a\", \"n\", \"t\", \"b\", \"e\"], [\"p\", \"e\", \"r\", \"t\", \"a\"]]]", "is_correct_args": "[[[\"c\", \"s\", \"n\", \"i\", \"p\"], [\"s\", \"o\", \"o\", \"r\", \"n\"], [\"c\", \"u\", \"i\", \"e\", \"_\"], [\"a\", \"n\", \"t\", \"b\", \"e\"], [\"p\", \"e\", \"r\", \"t\", \"a\"]], [\"snip\", \"scoon\", \"cuber\", \"artie\", \"penta\"]]", "A*_args": "[\"[['c', 's', 'n', 'i', 'p'], ['s', 'o', 'o', 'r', 'n'], ['c', 'u', 'i', 'e', '_'], ['a', 'n', 't', 'b', 'e'], ['p', 'e', 'r', 't', 'a']]\", \"['snip', 'scoon', 'cuber', 'artie', 'penta']\"]"}
{"diff_sorted_id": "86", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: card, sylva, shune, solum, bichy   The initial board: [['y', 'c', 'a', 'r', 'd'], ['s', 'u', 'l', 'c', 'a'], ['v', 'h', '_', 'n', 'o'], ['s', 'e', 'l', 's', 'm'], ['b', 'i', 'u', 'h', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.686600923538208", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"y\", \"c\", \"a\", \"r\", \"d\"], [\"s\", \"u\", \"l\", \"c\", \"a\"], [\"v\", \"h\", \"_\", \"n\", \"o\"], [\"s\", \"e\", \"l\", \"s\", \"m\"], [\"b\", \"i\", \"u\", \"h\", \"y\"]]]", "is_correct_args": "[[[\"y\", \"c\", \"a\", \"r\", \"d\"], [\"s\", \"u\", \"l\", \"c\", \"a\"], [\"v\", \"h\", \"_\", \"n\", \"o\"], [\"s\", \"e\", \"l\", \"s\", \"m\"], [\"b\", \"i\", \"u\", \"h\", \"y\"]], [\"card\", \"sylva\", \"shune\", \"solum\", \"bichy\"]]", "A*_args": "[\"[['y', 'c', 'a', 'r', 'd'], ['s', 'u', 'l', 'c', 'a'], ['v', 'h', '_', 'n', 'o'], ['s', 'e', 'l', 's', 'm'], ['b', 'i', 'u', 'h', 'y']]\", \"['card', 'sylva', 'shune', 'solum', 'bichy']\"]"}
{"diff_sorted_id": "87", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: echo, metin, perch, tulip, mulga   The initial board: [['e', 'e', 'l', 'h', 'o'], ['m', 'r', 't', 'u', 'n'], ['p', 'e', '_', 'c', 'i'], ['t', 'c', 'l', 'h', 'p'], ['m', 'u', 'i', 'g', 'a']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-left\", \"up-left\"]", "opt_solution_cost": "26", "opt_solution_compute_t": "3.2265894412994385", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"e\", \"e\", \"l\", \"h\", \"o\"], [\"m\", \"r\", \"t\", \"u\", \"n\"], [\"p\", \"e\", \"_\", \"c\", \"i\"], [\"t\", \"c\", \"l\", \"h\", \"p\"], [\"m\", \"u\", \"i\", \"g\", \"a\"]]]", "is_correct_args": "[[[\"e\", \"e\", \"l\", \"h\", \"o\"], [\"m\", \"r\", \"t\", \"u\", \"n\"], [\"p\", \"e\", \"_\", \"c\", \"i\"], [\"t\", \"c\", \"l\", \"h\", \"p\"], [\"m\", \"u\", \"i\", \"g\", \"a\"]], [\"echo\", \"metin\", \"perch\", \"tulip\", \"mulga\"]]", "A*_args": "[\"[['e', 'e', 'l', 'h', 'o'], ['m', 'r', 't', 'u', 'n'], ['p', 'e', '_', 'c', 'i'], ['t', 'c', 'l', 'h', 'p'], ['m', 'u', 'i', 'g', 'a']]\", \"['echo', 'metin', 'perch', 'tulip', 'mulga']\"]"}
{"diff_sorted_id": "88", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: frim, agate, askip, floey, zonar   The initial board: [['g', 'f', 't', 'i', 'm'], ['a', 'l', 'a', 'a', 'e'], ['n', 's', '_', 'i', 'e'], ['f', 'p', 'o', 'k', 'y'], ['z', 'o', 'r', 'a', 'r']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.5754249095916748", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"g\", \"f\", \"t\", \"i\", \"m\"], [\"a\", \"l\", \"a\", \"a\", \"e\"], [\"n\", \"s\", \"_\", \"i\", \"e\"], [\"f\", \"p\", \"o\", \"k\", \"y\"], [\"z\", \"o\", \"r\", \"a\", \"r\"]]]", "is_correct_args": "[[[\"g\", \"f\", \"t\", \"i\", \"m\"], [\"a\", \"l\", \"a\", \"a\", \"e\"], [\"n\", \"s\", \"_\", \"i\", \"e\"], [\"f\", \"p\", \"o\", \"k\", \"y\"], [\"z\", \"o\", \"r\", \"a\", \"r\"]], [\"frim\", \"agate\", \"askip\", \"floey\", \"zonar\"]]", "A*_args": "[\"[['g', 'f', 't', 'i', 'm'], ['a', 'l', 'a', 'a', 'e'], ['n', 's', '_', 'i', 'e'], ['f', 'p', 'o', 'k', 'y'], ['z', 'o', 'r', 'a', 'r']]\", \"['frim', 'agate', 'askip', 'floey', 'zonar']\"]"}
{"diff_sorted_id": "89", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: fage, palay, mowra, gemot, puffy   The initial board: [['a', 'f', 'w', 'g', 'e'], ['p', 'f', 'l', 'm', 'y'], ['o', 'o', 'a', 'r', 'a'], ['g', 'a', 'm', 'e', 't'], ['p', 'u', '_', 'f', 'y']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-right\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "24", "opt_solution_compute_t": "1.2028648853302002", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"a\", \"f\", \"w\", \"g\", \"e\"], [\"p\", \"f\", \"l\", \"m\", \"y\"], [\"o\", \"o\", \"a\", \"r\", \"a\"], [\"g\", \"a\", \"m\", \"e\", \"t\"], [\"p\", \"u\", \"_\", \"f\", \"y\"]]]", "is_correct_args": "[[[\"a\", \"f\", \"w\", \"g\", \"e\"], [\"p\", \"f\", \"l\", \"m\", \"y\"], [\"o\", \"o\", \"a\", \"r\", \"a\"], [\"g\", \"a\", \"m\", \"e\", \"t\"], [\"p\", \"u\", \"_\", \"f\", \"y\"]], [\"fage\", \"palay\", \"mowra\", \"gemot\", \"puffy\"]]", "A*_args": "[\"[['a', 'f', 'w', 'g', 'e'], ['p', 'f', 'l', 'm', 'y'], ['o', 'o', 'a', 'r', 'a'], ['g', 'a', 'm', 'e', 't'], ['p', 'u', '_', 'f', 'y']]\", \"['fage', 'palay', 'mowra', 'gemot', 'puffy']\"]"}
{"diff_sorted_id": "90", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: sour, mangy, kizil, logia, urian   The initial board: [['a', 's', 'i', 'u', 'r'], ['m', 'z', 'n', 'k', 'y'], ['g', 'i', 'o', 'i', 'l'], ['l', 'o', 'g', 'i', 'a'], ['u', 'r', '_', 'a', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[\"up-left\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.5282673835754395", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "25", "is_feasible_args": "[[[\"a\", \"s\", \"i\", \"u\", \"r\"], [\"m\", \"z\", \"n\", \"k\", \"y\"], [\"g\", \"i\", \"o\", \"i\", \"l\"], [\"l\", \"o\", \"g\", \"i\", \"a\"], [\"u\", \"r\", \"_\", \"a\", \"n\"]]]", "is_correct_args": "[[[\"a\", \"s\", \"i\", \"u\", \"r\"], [\"m\", \"z\", \"n\", \"k\", \"y\"], [\"g\", \"i\", \"o\", \"i\", \"l\"], [\"l\", \"o\", \"g\", \"i\", \"a\"], [\"u\", \"r\", \"_\", \"a\", \"n\"]], [\"sour\", \"mangy\", \"kizil\", \"logia\", \"urian\"]]", "A*_args": "[\"[['a', 's', 'i', 'u', 'r'], ['m', 'z', 'n', 'k', 'y'], ['g', 'i', 'o', 'i', 'l'], ['l', 'o', 'g', 'i', 'a'], ['u', 'r', '_', 'a', 'n']]\", \"['sour', 'mangy', 'kizil', 'logia', 'urian']\"]"}
{"diff_sorted_id": "91", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: peppy, stocky, pistol, swathe, cancan   The initial board: [['t', 'p', 'c', 'p', 'o', 'y'], ['s', 'e', 'o', 't', 'k', 's'], ['p', 'i', 'w', 't', '_', 'l'], ['s', 'n', 'a', 'y', 'h', 'a'], ['c', 'a', 'e', 'c', 'p', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.4025259017944336", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"t\", \"p\", \"c\", \"p\", \"o\", \"y\"], [\"s\", \"e\", \"o\", \"t\", \"k\", \"s\"], [\"p\", \"i\", \"w\", \"t\", \"_\", \"l\"], [\"s\", \"n\", \"a\", \"y\", \"h\", \"a\"], [\"c\", \"a\", \"e\", \"c\", \"p\", \"n\"]]]", "is_correct_args": "[[[\"t\", \"p\", \"c\", \"p\", \"o\", \"y\"], [\"s\", \"e\", \"o\", \"t\", \"k\", \"s\"], [\"p\", \"i\", \"w\", \"t\", \"_\", \"l\"], [\"s\", \"n\", \"a\", \"y\", \"h\", \"a\"], [\"c\", \"a\", \"e\", \"c\", \"p\", \"n\"]], [\"peppy\", \"stocky\", \"pistol\", \"swathe\", \"cancan\"]]", "A*_args": "[\"[['t', 'p', 'c', 'p', 'o', 'y'], ['s', 'e', 'o', 't', 'k', 's'], ['p', 'i', 'w', 't', '_', 'l'], ['s', 'n', 'a', 'y', 'h', 'a'], ['c', 'a', 'e', 'c', 'p', 'n']]\", \"['peppy', 'stocky', 'pistol', 'swathe', 'cancan']\"]"}
{"diff_sorted_id": "92", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: shrew, bedark, curcas, bender, hocker   The initial board: [['e', 's', '_', 'r', 'k', 'w'], ['b', 'c', 'd', 'd', 'r', 'a'], ['c', 'u', 'e', 'c', 'e', 's'], ['b', 'r', 'n', 'h', 'e', 'a'], ['h', 'o', 'e', 'k', 'r', 'r']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "28", "opt_solution_compute_t": "23.219958066940308", "solution_depth": "28", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"e\", \"s\", \"_\", \"r\", \"k\", \"w\"], [\"b\", \"c\", \"d\", \"d\", \"r\", \"a\"], [\"c\", \"u\", \"e\", \"c\", \"e\", \"s\"], [\"b\", \"r\", \"n\", \"h\", \"e\", \"a\"], [\"h\", \"o\", \"e\", \"k\", \"r\", \"r\"]]]", "is_correct_args": "[[[\"e\", \"s\", \"_\", \"r\", \"k\", \"w\"], [\"b\", \"c\", \"d\", \"d\", \"r\", \"a\"], [\"c\", \"u\", \"e\", \"c\", \"e\", \"s\"], [\"b\", \"r\", \"n\", \"h\", \"e\", \"a\"], [\"h\", \"o\", \"e\", \"k\", \"r\", \"r\"]], [\"shrew\", \"bedark\", \"curcas\", \"bender\", \"hocker\"]]", "A*_args": "[\"[['e', 's', '_', 'r', 'k', 'w'], ['b', 'c', 'd', 'd', 'r', 'a'], ['c', 'u', 'e', 'c', 'e', 's'], ['b', 'r', 'n', 'h', 'e', 'a'], ['h', 'o', 'e', 'k', 'r', 'r']]\", \"['shrew', 'bedark', 'curcas', 'bender', 'hocker']\"]"}
{"diff_sorted_id": "93", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: helen, adelea, bumble, iodism, trullo   The initial board: [['d', 'h', '_', 'l', 'e', 'n'], ['a', 'a', 'e', 'b', 'e', 'u'], ['m', 'u', 'i', 'b', 'e', 'e'], ['i', 'o', 'd', 'm', 's', 'l'], ['t', 'r', 'l', 'l', 'l', 'o']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\"]", "opt_solution_cost": "38", "opt_solution_compute_t": "502.2531027793884", "solution_depth": "38", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"d\", \"h\", \"_\", \"l\", \"e\", \"n\"], [\"a\", \"a\", \"e\", \"b\", \"e\", \"u\"], [\"m\", \"u\", \"i\", \"b\", \"e\", \"e\"], [\"i\", \"o\", \"d\", \"m\", \"s\", \"l\"], [\"t\", \"r\", \"l\", \"l\", \"l\", \"o\"]]]", "is_correct_args": "[[[\"d\", \"h\", \"_\", \"l\", \"e\", \"n\"], [\"a\", \"a\", \"e\", \"b\", \"e\", \"u\"], [\"m\", \"u\", \"i\", \"b\", \"e\", \"e\"], [\"i\", \"o\", \"d\", \"m\", \"s\", \"l\"], [\"t\", \"r\", \"l\", \"l\", \"l\", \"o\"]], [\"helen\", \"adelea\", \"bumble\", \"iodism\", \"trullo\"]]", "A*_args": "[\"[['d', 'h', '_', 'l', 'e', 'n'], ['a', 'a', 'e', 'b', 'e', 'u'], ['m', 'u', 'i', 'b', 'e', 'e'], ['i', 'o', 'd', 'm', 's', 'l'], ['t', 'r', 'l', 'l', 'l', 'o']]\", \"['helen', 'adelea', 'bumble', 'iodism', 'trullo']\"]"}
{"diff_sorted_id": "94", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: drunk, armure, diglot, caudal, mirach   The initial board: [['_', 'd', 'a', 'u', 'n', 'k'], ['a', 'r', 'm', 'r', 'r', 'e'], ['d', 'i', 'u', 'l', 'l', 't'], ['c', 'd', 'u', 'r', 'a', 'c'], ['m', 'i', 'g', 'a', 'o', 'h']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"down-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.9841225147247314", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"_\", \"d\", \"a\", \"u\", \"n\", \"k\"], [\"a\", \"r\", \"m\", \"r\", \"r\", \"e\"], [\"d\", \"i\", \"u\", \"l\", \"l\", \"t\"], [\"c\", \"d\", \"u\", \"r\", \"a\", \"c\"], [\"m\", \"i\", \"g\", \"a\", \"o\", \"h\"]]]", "is_correct_args": "[[[\"_\", \"d\", \"a\", \"u\", \"n\", \"k\"], [\"a\", \"r\", \"m\", \"r\", \"r\", \"e\"], [\"d\", \"i\", \"u\", \"l\", \"l\", \"t\"], [\"c\", \"d\", \"u\", \"r\", \"a\", \"c\"], [\"m\", \"i\", \"g\", \"a\", \"o\", \"h\"]], [\"drunk\", \"armure\", \"diglot\", \"caudal\", \"mirach\"]]", "A*_args": "[\"[['_', 'd', 'a', 'u', 'n', 'k'], ['a', 'r', 'm', 'r', 'r', 'e'], ['d', 'i', 'u', 'l', 'l', 't'], ['c', 'd', 'u', 'r', 'a', 'c'], ['m', 'i', 'g', 'a', 'o', 'h']]\", \"['drunk', 'armure', 'diglot', 'caudal', 'mirach']\"]"}
{"diff_sorted_id": "95", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: tuner, myrtol, soldan, elvira, herman   The initial board: [['y', 't', 's', 'n', 'a', 'r'], ['m', 'r', 'r', 't', 'o', 'e'], ['l', 'o', '_', 'd', 'l', 'n'], ['e', 'u', 'v', 'i', 'r', 'a'], ['h', 'e', 'l', 'm', 'a', 'n']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"up-left\", \"up-right\", \"down-right\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.4562370777130127", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"y\", \"t\", \"s\", \"n\", \"a\", \"r\"], [\"m\", \"r\", \"r\", \"t\", \"o\", \"e\"], [\"l\", \"o\", \"_\", \"d\", \"l\", \"n\"], [\"e\", \"u\", \"v\", \"i\", \"r\", \"a\"], [\"h\", \"e\", \"l\", \"m\", \"a\", \"n\"]]]", "is_correct_args": "[[[\"y\", \"t\", \"s\", \"n\", \"a\", \"r\"], [\"m\", \"r\", \"r\", \"t\", \"o\", \"e\"], [\"l\", \"o\", \"_\", \"d\", \"l\", \"n\"], [\"e\", \"u\", \"v\", \"i\", \"r\", \"a\"], [\"h\", \"e\", \"l\", \"m\", \"a\", \"n\"]], [\"tuner\", \"myrtol\", \"soldan\", \"elvira\", \"herman\"]]", "A*_args": "[\"[['y', 't', 's', 'n', 'a', 'r'], ['m', 'r', 'r', 't', 'o', 'e'], ['l', 'o', '_', 'd', 'l', 'n'], ['e', 'u', 'v', 'i', 'r', 'a'], ['h', 'e', 'l', 'm', 'a', 'n']]\", \"['tuner', 'myrtol', 'soldan', 'elvira', 'herman']\"]"}
{"diff_sorted_id": "96", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: siena, locked, conche, celtic, blanco   The initial board: [['o', 's', 'n', 'e', 'd', 'a'], ['l', 'k', 'c', 'c', 'e', 'h'], ['t', 'o', '_', 'c', 'n', 'e'], ['c', 'i', 'l', 'a', 'i', 'c'], ['b', 'l', 'e', 'n', 'c', 'o']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.39241790771484375", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"o\", \"s\", \"n\", \"e\", \"d\", \"a\"], [\"l\", \"k\", \"c\", \"c\", \"e\", \"h\"], [\"t\", \"o\", \"_\", \"c\", \"n\", \"e\"], [\"c\", \"i\", \"l\", \"a\", \"i\", \"c\"], [\"b\", \"l\", \"e\", \"n\", \"c\", \"o\"]]]", "is_correct_args": "[[[\"o\", \"s\", \"n\", \"e\", \"d\", \"a\"], [\"l\", \"k\", \"c\", \"c\", \"e\", \"h\"], [\"t\", \"o\", \"_\", \"c\", \"n\", \"e\"], [\"c\", \"i\", \"l\", \"a\", \"i\", \"c\"], [\"b\", \"l\", \"e\", \"n\", \"c\", \"o\"]], [\"siena\", \"locked\", \"conche\", \"celtic\", \"blanco\"]]", "A*_args": "[\"[['o', 's', 'n', 'e', 'd', 'a'], ['l', 'k', 'c', 'c', 'e', 'h'], ['t', 'o', '_', 'c', 'n', 'e'], ['c', 'i', 'l', 'a', 'i', 'c'], ['b', 'l', 'e', 'n', 'c', 'o']]\", \"['siena', 'locked', 'conche', 'celtic', 'blanco']\"]"}
{"diff_sorted_id": "97", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: burst, merril, monase, chivey, tilpah   The initial board: [['e', 'b', 'v', 'r', 'l', 't'], ['m', 'u', 'r', 'm', 'i', 'r'], ['h', 'o', 'a', 'a', '_', 'e'], ['c', 'n', 'i', 's', 'e', 's'], ['t', 'i', 'l', 'p', 'y', 'h']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.3242766857147217", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"e\", \"b\", \"v\", \"r\", \"l\", \"t\"], [\"m\", \"u\", \"r\", \"m\", \"i\", \"r\"], [\"h\", \"o\", \"a\", \"a\", \"_\", \"e\"], [\"c\", \"n\", \"i\", \"s\", \"e\", \"s\"], [\"t\", \"i\", \"l\", \"p\", \"y\", \"h\"]]]", "is_correct_args": "[[[\"e\", \"b\", \"v\", \"r\", \"l\", \"t\"], [\"m\", \"u\", \"r\", \"m\", \"i\", \"r\"], [\"h\", \"o\", \"a\", \"a\", \"_\", \"e\"], [\"c\", \"n\", \"i\", \"s\", \"e\", \"s\"], [\"t\", \"i\", \"l\", \"p\", \"y\", \"h\"]], [\"burst\", \"merril\", \"monase\", \"chivey\", \"tilpah\"]]", "A*_args": "[\"[['e', 'b', 'v', 'r', 'l', 't'], ['m', 'u', 'r', 'm', 'i', 'r'], ['h', 'o', 'a', 'a', '_', 'e'], ['c', 'n', 'i', 's', 'e', 's'], ['t', 'i', 'l', 'p', 'y', 'h']]\", \"['burst', 'merril', 'monase', 'chivey', 'tilpah']\"]"}
{"diff_sorted_id": "98", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: rafty, lapped, angina, lanose, acnida   The initial board: [['a', 'r', 'o', 'f', 'n', 'y'], ['l', 'g', 'p', 'p', 'e', 'a'], ['a', 'n', 'n', 'i', '_', 'a'], ['l', 't', 'n', 'd', 's', 'e'], ['a', 'c', 'a', 'i', 'd', 'a']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"down-left\", \"up-left\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "28", "opt_solution_compute_t": "5.565536260604858", "solution_depth": "28", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"a\", \"r\", \"o\", \"f\", \"n\", \"y\"], [\"l\", \"g\", \"p\", \"p\", \"e\", \"a\"], [\"a\", \"n\", \"n\", \"i\", \"_\", \"a\"], [\"l\", \"t\", \"n\", \"d\", \"s\", \"e\"], [\"a\", \"c\", \"a\", \"i\", \"d\", \"a\"]]]", "is_correct_args": "[[[\"a\", \"r\", \"o\", \"f\", \"n\", \"y\"], [\"l\", \"g\", \"p\", \"p\", \"e\", \"a\"], [\"a\", \"n\", \"n\", \"i\", \"_\", \"a\"], [\"l\", \"t\", \"n\", \"d\", \"s\", \"e\"], [\"a\", \"c\", \"a\", \"i\", \"d\", \"a\"]], [\"rafty\", \"lapped\", \"angina\", \"lanose\", \"acnida\"]]", "A*_args": "[\"[['a', 'r', 'o', 'f', 'n', 'y'], ['l', 'g', 'p', 'p', 'e', 'a'], ['a', 'n', 'n', 'i', '_', 'a'], ['l', 't', 'n', 'd', 's', 'e'], ['a', 'c', 'a', 'i', 'd', 'a']]\", \"['rafty', 'lapped', 'angina', 'lanose', 'acnida']\"]"}
{"diff_sorted_id": "99", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: chank, hormic, tigtag, tornal, zythum   The initial board: [['o', 'c', 'a', 'a', 'n', 'k'], ['h', 'm', 'r', 'l', 'i', 'g'], ['h', 'i', 'o', 't', 'u', 'g'], ['t', 'n', 'r', 't', 'a', 'c'], ['z', 'y', 't', 'h', '_', 'm']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"up-right\", \"up-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"up-right\", \"up-left\", \"down-left\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"up-right\", \"up-right\", \"up-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"up-left\"]", "opt_solution_cost": "30", "opt_solution_compute_t": "13.15977692604065", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"o\", \"c\", \"a\", \"a\", \"n\", \"k\"], [\"h\", \"m\", \"r\", \"l\", \"i\", \"g\"], [\"h\", \"i\", \"o\", \"t\", \"u\", \"g\"], [\"t\", \"n\", \"r\", \"t\", \"a\", \"c\"], [\"z\", \"y\", \"t\", \"h\", \"_\", \"m\"]]]", "is_correct_args": "[[[\"o\", \"c\", \"a\", \"a\", \"n\", \"k\"], [\"h\", \"m\", \"r\", \"l\", \"i\", \"g\"], [\"h\", \"i\", \"o\", \"t\", \"u\", \"g\"], [\"t\", \"n\", \"r\", \"t\", \"a\", \"c\"], [\"z\", \"y\", \"t\", \"h\", \"_\", \"m\"]], [\"chank\", \"hormic\", \"tigtag\", \"tornal\", \"zythum\"]]", "A*_args": "[\"[['o', 'c', 'a', 'a', 'n', 'k'], ['h', 'm', 'r', 'l', 'i', 'g'], ['h', 'i', 'o', 't', 'u', 'g'], ['t', 'n', 'r', 't', 'a', 'c'], ['z', 'y', 't', 'h', '_', 'm']]\", \"['chank', 'hormic', 'tigtag', 'tornal', 'zythum']\"]"}
{"diff_sorted_id": "100", "problem_statement": "In the game 'Sort the Chars', we are given a table of n by m dimensions. This table contains n words, each with m characters, except for the first word which has m - 1 characters. Each character is written on a separate tile. The objective of the game is to rearrange the characters such that row i spells the i-th word in the list, with the blank tile ('_') placed in the top left corner of the board in the end. We can rearrange the tiles by swapping the blank space with any of its 4 diagonal neighboring tiles. Given the list of words and initial state of the board below, where the black space is represented as '_', what is the shortest list of swap actions (reported in python syntax) that can sort the board into the given list of target words? The list must only include the 4 diagonal swap directions: up-right, down-right, up-left, or down-left, representing the direction in ehich the blank space was swpped in. Target words: katar, bonsai, sambar, mopane, voyeur   The initial board: [['o', 'k', 's', 't', 'a', 'r'], ['b', 'y', 'n', 'i', 'a', 'a'], ['s', 'a', '_', 'b', 'a', 'r'], ['m', 'o', 'p', 'e', 'n', 'u'], ['v', 'o', 'm', 'e', 'a', 'r']]", "problem_type": "8_puzzle_words", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[\"down-right\", \"up-right\", \"up-left\", \"up-right\", \"down-right\", \"down-left\", \"down-left\", \"up-left\", \"up-left\", \"up-right\", \"down-right\", \"down-right\", \"down-left\", \"up-left\", \"up-left\", \"down-left\", \"down-right\", \"down-right\", \"up-right\", \"down-right\", \"up-right\", \"up-left\", \"up-left\", \"down-left\", \"down-left\", \"up-left\", \"up-right\", \"up-left\"]", "opt_solution_cost": "28", "opt_solution_compute_t": "19.604556798934937", "solution_depth": "28", "max_successor_states": "4", "num_vars_per_state": "30", "is_feasible_args": "[[[\"o\", \"k\", \"s\", \"t\", \"a\", \"r\"], [\"b\", \"y\", \"n\", \"i\", \"a\", \"a\"], [\"s\", \"a\", \"_\", \"b\", \"a\", \"r\"], [\"m\", \"o\", \"p\", \"e\", \"n\", \"u\"], [\"v\", \"o\", \"m\", \"e\", \"a\", \"r\"]]]", "is_correct_args": "[[[\"o\", \"k\", \"s\", \"t\", \"a\", \"r\"], [\"b\", \"y\", \"n\", \"i\", \"a\", \"a\"], [\"s\", \"a\", \"_\", \"b\", \"a\", \"r\"], [\"m\", \"o\", \"p\", \"e\", \"n\", \"u\"], [\"v\", \"o\", \"m\", \"e\", \"a\", \"r\"]], [\"katar\", \"bonsai\", \"sambar\", \"mopane\", \"voyeur\"]]", "A*_args": "[\"[['o', 'k', 's', 't', 'a', 'r'], ['b', 'y', 'n', 'i', 'a', 'a'], ['s', 'a', '_', 'b', 'a', 'r'], ['m', 'o', 'p', 'e', 'n', 'u'], ['v', 'o', 'm', 'e', 'a', 'r']]\", \"['katar', 'bonsai', 'sambar', 'mopane', 'voyeur']\"]"}
