{"diff_sorted_id": "1", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[12, 55, '_'], [35, 97, 43], [17, 25, 9]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[55, 97, 35, 12, 97, 55, 43, 9, 25, 17, 12, 35, 9, 25, 17, 9, 25, 17]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.04202771186828613", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[12, 55, \"_\"], [35, 97, 43], [17, 25, 9]]]", "is_correct_args": "[[[12, 55, \"_\"], [35, 97, 43], [17, 25, 9]]]", "A*_args": "[\"[[12, 55, '_'], [35, 97, 43], [17, 25, 9]]\"]"}
{"diff_sorted_id": "2", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[99, 69, 19], [53, '_', 30], [100, 63, 40]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[53, 100, 63, 40, 30, 19, 69, 53, 40, 30, 19, 40, 53, 99, 100, 63, 30, 19]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.03798794746398926", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[99, 69, 19], [53, \"_\", 30], [100, 63, 40]]]", "is_correct_args": "[[[99, 69, 19], [53, \"_\", 30], [100, 63, 40]]]", "A*_args": "[\"[[99, 69, 19], [53, '_', 30], [100, 63, 40]]\"]"}
{"diff_sorted_id": "3", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[87, 50, 82], [68, '_', 74], [23, 61, 11]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[50, 82, 74, 50, 61, 11]", "opt_solution_cost": "6", "opt_solution_compute_t": "0.028201580047607422", "solution_depth": "6", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[87, 50, 82], [68, \"_\", 74], [23, 61, 11]]]", "is_correct_args": "[[[87, 50, 82], [68, \"_\", 74], [23, 61, 11]]]", "A*_args": "[\"[[87, 50, 82], [68, '_', 74], [23, 61, 11]]\"]"}
{"diff_sorted_id": "4", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[66, 89, 70], [25, 42, 83], ['_', 24, 71]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[24, 42, 89, 70, 83, 71, 42, 24, 25, 66, 70, 89, 66, 70, 89, 83, 71, 42]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.03897857666015625", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[66, 89, 70], [25, 42, 83], [\"_\", 24, 71]]]", "is_correct_args": "[[[66, 89, 70], [25, 42, 83], [\"_\", 24, 71]]]", "A*_args": "[\"[[66, 89, 70], [25, 42, 83], ['_', 24, 71]]\"]"}
{"diff_sorted_id": "5", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[78, 98, 89], [38, '_', 7], [58, 95, 70]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[95, 58, 38, 78, 98, 95, 7, 70, 58, 7, 70, 58]", "opt_solution_cost": "12", "opt_solution_compute_t": "0.029888629913330078", "solution_depth": "12", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[78, 98, 89], [38, \"_\", 7], [58, 95, 70]]]", "is_correct_args": "[[[78, 98, 89], [38, \"_\", 7], [58, 95, 70]]]", "A*_args": "[\"[[78, 98, 89], [38, '_', 7], [58, 95, 70]]\"]"}
{"diff_sorted_id": "6", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[46, 82, 90], [36, 41, 38], [28, 55, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "2", "opt_solution": "[38, 41, 82, 90, 41, 82, 55, 28, 36, 46, 90, 41, 82, 55, 41, 82, 55, 38]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.046418190002441406", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[46, 82, 90], [36, 41, 38], [28, 55, \"_\"]]]", "is_correct_args": "[[[46, 82, 90], [36, 41, 38], [28, 55, \"_\"]]]", "A*_args": "[\"[[46, 82, 90], [36, 41, 38], [28, 55, '_']]\"]"}
{"diff_sorted_id": "7", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[36, 16, 48], [86, '_', 13], [89, 31, 37]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[31, 37, 13, 31, 16, 36, 86, 89, 37, 16, 36, 86, 89, 37, 16, 13]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.03079676628112793", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[36, 16, 48], [86, \"_\", 13], [89, 31, 37]]]", "is_correct_args": "[[[36, 16, 48], [86, \"_\", 13], [89, 31, 37]]]", "A*_args": "[\"[[36, 16, 48], [86, '_', 13], [89, 31, 37]]\"]"}
{"diff_sorted_id": "8", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[77, 49, '_'], [56, 72, 74], [96, 33, 59]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[74, 72, 56, 96, 33, 56, 49, 77, 96, 49, 72, 59, 56, 33, 49, 72, 59, 56]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.03490924835205078", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[77, 49, \"_\"], [56, 72, 74], [96, 33, 59]]]", "is_correct_args": "[[[77, 49, \"_\"], [56, 72, 74], [96, 33, 59]]]", "A*_args": "[\"[[77, 49, '_'], [56, 72, 74], [96, 33, 59]]\"]"}
{"diff_sorted_id": "9", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[23, 30, 43], [12, 31, 19], [6, 68, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[19, 31, 68, 6, 12, 23, 30, 68, 23, 30, 68, 43, 31, 19]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.02962183952331543", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[23, 30, 43], [12, 31, 19], [6, 68, \"_\"]]]", "is_correct_args": "[[[23, 30, 43], [12, 31, 19], [6, 68, \"_\"]]]", "A*_args": "[\"[[23, 30, 43], [12, 31, 19], [6, 68, '_']]\"]"}
{"diff_sorted_id": "10", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[93, 88, 60], [28, 18, 24], ['_', 47, 53]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[47, 53, 24, 18, 28, 47, 53, 24, 18, 28, 47, 53, 24, 18]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.022923946380615234", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[93, 88, 60], [28, 18, 24], [\"_\", 47, 53]]]", "is_correct_args": "[[[93, 88, 60], [28, 18, 24], [\"_\", 47, 53]]]", "A*_args": "[\"[[93, 88, 60], [28, 18, 24], ['_', 47, 53]]\"]"}
{"diff_sorted_id": "11", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[59, 76, 55], [54, '_', 85], [50, 95, 53]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[54, 50, 95, 53, 85, 54, 53, 95, 50, 53, 95, 85, 54, 55, 76, 95, 85, 50, 53, 59, 95, 85, 55, 54]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.10947823524475098", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[59, 76, 55], [54, \"_\", 85], [50, 95, 53]]]", "is_correct_args": "[[[59, 76, 55], [54, \"_\", 85], [50, 95, 53]]]", "A*_args": "[\"[[59, 76, 55], [54, '_', 85], [50, 95, 53]]\"]"}
{"diff_sorted_id": "12", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[66, 35, 51], [76, '_', 73], [90, 54, 22]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[35, 51, 73, 22, 54, 35, 51, 66, 76, 90, 35, 54, 22, 51, 66, 76, 90, 66, 54, 22]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.061293601989746094", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[66, 35, 51], [76, \"_\", 73], [90, 54, 22]]]", "is_correct_args": "[[[66, 35, 51], [76, \"_\", 73], [90, 54, 22]]]", "A*_args": "[\"[[66, 35, 51], [76, '_', 73], [90, 54, 22]]\"]"}
{"diff_sorted_id": "13", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[41, 36, 82], [29, 97, 43], ['_', 51, 61]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[29, 97, 36, 41, 97, 36, 51, 29, 36, 51, 43, 61, 29, 43, 41, 82, 61, 41, 43, 29]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.04056262969970703", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[41, 36, 82], [29, 97, 43], [\"_\", 51, 61]]]", "is_correct_args": "[[[41, 36, 82], [29, 97, 43], [\"_\", 51, 61]]]", "A*_args": "[\"[[41, 36, 82], [29, 97, 43], ['_', 51, 61]]\"]"}
{"diff_sorted_id": "14", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[28, 51, 19], [89, '_', 21], [43, 39, 45]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[21, 45, 39, 21, 45, 19, 51, 28, 89, 43, 21, 39, 19, 45, 28, 51, 45, 28, 39, 19]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.045632362365722656", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[28, 51, 19], [89, \"_\", 21], [43, 39, 45]]]", "is_correct_args": "[[[28, 51, 19], [89, \"_\", 21], [43, 39, 45]]]", "A*_args": "[\"[[28, 51, 19], [89, '_', 21], [43, 39, 45]]\"]"}
{"diff_sorted_id": "15", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[80, 62, 76], [47, 67, 82], [24, 73, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[73, 67, 82, 73, 67, 24, 47, 82, 62, 80, 82, 47, 24, 62, 73, 67, 62, 24, 47, 73, 67, 62]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.08130145072937012", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[80, 62, 76], [47, 67, 82], [24, 73, \"_\"]]]", "is_correct_args": "[[[80, 62, 76], [47, 67, 82], [24, 73, \"_\"]]]", "A*_args": "[\"[[80, 62, 76], [47, 67, 82], [24, 73, '_']]\"]"}
{"diff_sorted_id": "16", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[77, 81, 74], [93, 85, 98], [59, 53, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[53, 59, 93, 77, 81, 85, 98, 74, 85, 98, 77, 93, 59, 77, 93, 81, 98, 93, 77, 53]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.028780221939086914", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[77, 81, 74], [93, 85, 98], [59, 53, \"_\"]]]", "is_correct_args": "[[[77, 81, 74], [93, 85, 98], [59, 53, \"_\"]]]", "A*_args": "[\"[[77, 81, 74], [93, 85, 98], [59, 53, '_']]\"]"}
{"diff_sorted_id": "17", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[27, 18, 79], [22, 99, 9], [49, 53, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[53, 49, 22, 99, 18, 27, 99, 18, 49, 22, 18, 49, 9, 53, 22, 9, 27, 79, 53, 22]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.027205705642700195", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[27, 18, 79], [22, 99, 9], [49, 53, \"_\"]]]", "is_correct_args": "[[[27, 18, 79], [22, 99, 9], [49, 53, \"_\"]]]", "A*_args": "[\"[[27, 18, 79], [22, 99, 9], [49, 53, '_']]\"]"}
{"diff_sorted_id": "18", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[88, 52, 85], [98, 96, 83], [50, 80, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[83, 96, 52, 88, 98, 52, 96, 85, 88, 96, 85, 83, 80, 50, 52, 85, 83, 80]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.027386188507080078", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[88, 52, 85], [98, 96, 83], [50, 80, \"_\"]]]", "is_correct_args": "[[[88, 52, 85], [98, 96, 83], [50, 80, \"_\"]]]", "A*_args": "[\"[[88, 52, 85], [98, 96, 83], [50, 80, '_']]\"]"}
{"diff_sorted_id": "19", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[89, 69, 35], [16, 14, 64], ['_', 23, 32]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[16, 89, 69, 35, 64, 32, 23, 14, 35, 69, 89, 35, 32, 23]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.030463218688964844", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[89, 69, 35], [16, 14, 64], [\"_\", 23, 32]]]", "is_correct_args": "[[[89, 69, 35], [16, 14, 64], [\"_\", 23, 32]]]", "A*_args": "[\"[[89, 69, 35], [16, 14, 64], ['_', 23, 32]]\"]"}
{"diff_sorted_id": "20", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[46, 50, 97], [92, 49, 99], [91, 25, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[99, 49, 92, 91, 25, 99, 49, 92, 91, 46, 50, 91, 99, 25, 46, 50, 91, 99, 50, 91, 99, 97, 92, 49]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.10476183891296387", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[46, 50, 97], [92, 49, 99], [91, 25, \"_\"]]]", "is_correct_args": "[[[46, 50, 97], [92, 49, 99], [91, 25, \"_\"]]]", "A*_args": "[\"[[46, 50, 97], [92, 49, 99], [91, 25, '_']]\"]"}
{"diff_sorted_id": "21", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[25, 71, 58], [61, 94, 53], [50, 18, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[53, 94, 61, 25, 71, 58, 94, 61, 18, 50, 25, 71, 58, 94, 61, 53, 50, 18, 71, 58, 94, 71, 53, 50]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.061148881912231445", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[25, 71, 58], [61, 94, 53], [50, 18, \"_\"]]]", "is_correct_args": "[[[25, 71, 58], [61, 94, 53], [50, 18, \"_\"]]]", "A*_args": "[\"[[25, 71, 58], [61, 94, 53], [50, 18, '_']]\"]"}
{"diff_sorted_id": "22", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[81, 25, '_'], [19, 56, 14], [61, 41, 39]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[25, 56, 41, 61, 19, 41, 61, 39, 14, 25, 56, 61, 39, 14]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.019939899444580078", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[81, 25, \"_\"], [19, 56, 14], [61, 41, 39]]]", "is_correct_args": "[[[81, 25, \"_\"], [19, 56, 14], [61, 41, 39]]]", "A*_args": "[\"[[81, 25, '_'], [19, 56, 14], [61, 41, 39]]\"]"}
{"diff_sorted_id": "23", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[62, 43, 28], [59, 34, 53], [29, 76, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[53, 28, 43, 34, 59, 29, 76, 53, 28, 43, 34, 59, 29, 76, 53, 29, 43, 34, 59, 62, 76, 53, 29, 28]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.11378741264343262", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[62, 43, 28], [59, 34, 53], [29, 76, \"_\"]]]", "is_correct_args": "[[[62, 43, 28], [59, 34, 53], [29, 76, \"_\"]]]", "A*_args": "[\"[[62, 43, 28], [59, 34, 53], [29, 76, '_']]\"]"}
{"diff_sorted_id": "24", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[35, 92, '_'], [32, 44, 94], [97, 75, 58]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[92, 35, 32, 97, 75, 44, 97, 32, 35, 97, 94, 58, 44, 75, 32, 35, 97, 94, 75, 32, 35, 75, 58, 44]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.1467905044555664", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[35, 92, \"_\"], [32, 44, 94], [97, 75, 58]]]", "is_correct_args": "[[[35, 92, \"_\"], [32, 44, 94], [97, 75, 58]]]", "A*_args": "[\"[[35, 92, '_'], [32, 44, 94], [97, 75, 58]]\"]"}
{"diff_sorted_id": "25", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[45, 13, '_'], [66, 41, 76], [85, 21, 74]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[76, 41, 13, 76, 41, 13, 66, 85, 21, 74, 13, 41, 76, 45, 85, 66, 74, 13, 41, 74, 45, 76, 74, 41]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.10150957107543945", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[45, 13, \"_\"], [66, 41, 76], [85, 21, 74]]]", "is_correct_args": "[[[45, 13, \"_\"], [66, 41, 76], [85, 21, 74]]]", "A*_args": "[\"[[45, 13, '_'], [66, 41, 76], [85, 21, 74]]\"]"}
{"diff_sorted_id": "26", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[56, 79, '_'], [43, 89, 94], [36, 52, 25]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[79, 89, 94, 79, 89, 94, 43, 56, 94, 89, 79, 43, 52, 25]", "opt_solution_cost": "14", "opt_solution_compute_t": "0.0211181640625", "solution_depth": "14", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[56, 79, \"_\"], [43, 89, 94], [36, 52, 25]]]", "is_correct_args": "[[[56, 79, \"_\"], [43, 89, 94], [36, 52, 25]]]", "A*_args": "[\"[[56, 79, '_'], [43, 89, 94], [36, 52, 25]]\"]"}
{"diff_sorted_id": "27", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[85, 73, 14], [79, 23, 50], ['_', 99, 63]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[99, 23, 50, 14, 73, 50, 79, 99, 23, 63, 14, 73, 50, 79, 73, 50, 79, 85, 99, 73, 63, 14]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.036279916763305664", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[85, 73, 14], [79, 23, 50], [\"_\", 99, 63]]]", "is_correct_args": "[[[85, 73, 14], [79, 23, 50], [\"_\", 99, 63]]]", "A*_args": "[\"[[85, 73, 14], [79, 23, 50], ['_', 99, 63]]\"]"}
{"diff_sorted_id": "28", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[10, 81, 46], [87, 74, 72], [36, 45, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[45, 36, 87, 10, 81, 74, 10, 87, 36, 10, 72, 46, 74, 81, 87, 72, 46, 45]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.023023605346679688", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[10, 81, 46], [87, 74, 72], [36, 45, \"_\"]]]", "is_correct_args": "[[[10, 81, 46], [87, 74, 72], [36, 45, \"_\"]]]", "A*_args": "[\"[[10, 81, 46], [87, 74, 72], [36, 45, '_']]\"]"}
{"diff_sorted_id": "29", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[30, 12, 67], [21, '_', 28], [80, 16, 37]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[12, 30, 21, 80, 16, 12, 30, 21, 80, 30, 28, 37, 12, 28, 21, 67, 37, 21, 28, 12]", "opt_solution_cost": "20", "opt_solution_compute_t": "0.03293919563293457", "solution_depth": "20", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[30, 12, 67], [21, \"_\", 28], [80, 16, 37]]]", "is_correct_args": "[[[30, 12, 67], [21, \"_\", 28], [80, 16, 37]]]", "A*_args": "[\"[[30, 12, 67], [21, '_', 28], [80, 16, 37]]\"]"}
{"diff_sorted_id": "30", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[78, 69, '_'], [68, 49, 95], [74, 15, 39]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[95, 49, 15, 74, 68, 15, 74, 39, 49, 74, 15, 68, 39, 15, 68, 78, 69, 95, 74, 68, 78, 69, 95, 78, 68, 49]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.1302354335784912", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "9", "is_feasible_args": "[[[78, 69, \"_\"], [68, 49, 95], [74, 15, 39]]]", "is_correct_args": "[[[78, 69, \"_\"], [68, 49, 95], [74, 15, 39]]]", "A*_args": "[\"[[78, 69, '_'], [68, 49, 95], [74, 15, 39]]\"]"}
{"diff_sorted_id": "31", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[75, 53, 73, 62], ['_', 14, 90, 43], [21, 17, 51, 27]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[21, 17, 14, 90, 51, 14, 17, 21, 90, 53, 75, 90, 53, 51, 43, 27]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.03641033172607422", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[75, 53, 73, 62], [\"_\", 14, 90, 43], [21, 17, 51, 27]]]", "is_correct_args": "[[[75, 53, 73, 62], [\"_\", 14, 90, 43], [21, 17, 51, 27]]]", "A*_args": "[\"[[75, 53, 73, 62], ['_', 14, 90, 43], [21, 17, 51, 27]]\"]"}
{"diff_sorted_id": "32", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[69, 56, 8, 67], [15, 47, 44, 30], [73, '_', 24, 63]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[24, 44, 30, 63, 44, 30, 8, 67, 63, 44, 30, 8, 47, 15, 73, 24, 15, 56, 69, 73, 56, 47, 44, 30]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.1358938217163086", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[69, 56, 8, 67], [15, 47, 44, 30], [73, \"_\", 24, 63]]]", "is_correct_args": "[[[69, 56, 8, 67], [15, 47, 44, 30], [73, \"_\", 24, 63]]]", "A*_args": "[\"[[69, 56, 8, 67], [15, 47, 44, 30], [73, '_', 24, 63]]\"]"}
{"diff_sorted_id": "33", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[79, 90, 85, 67], [100, 61, '_', 15], [95, 41, 33, 73]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[61, 100, 95, 41, 33, 73, 15, 61, 73, 15, 61, 67, 85, 90, 100, 95, 79, 100, 95, 73, 67, 61]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.05052661895751953", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[79, 90, 85, 67], [100, 61, \"_\", 15], [95, 41, 33, 73]]]", "is_correct_args": "[[[79, 90, 85, 67], [100, 61, \"_\", 15], [95, 41, 33, 73]]]", "A*_args": "[\"[[79, 90, 85, 67], [100, 61, '_', 15], [95, 41, 33, 73]]\"]"}
{"diff_sorted_id": "34", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[61, '_', 99, 70], [42, 81, 90, 16], [41, 54, 28, 45]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[99, 90, 81, 42, 61, 99, 90, 81, 42, 54, 28, 45, 16, 42, 45, 16]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.027817249298095703", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[61, \"_\", 99, 70], [42, 81, 90, 16], [41, 54, 28, 45]]]", "is_correct_args": "[[[61, \"_\", 99, 70], [42, 81, 90, 16], [41, 54, 28, 45]]]", "A*_args": "[\"[[61, '_', 99, 70], [42, 81, 90, 16], [41, 54, 28, 45]]\"]"}
{"diff_sorted_id": "35", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[95, '_', 80, 18], [67, 66, 35, 94], [27, 26, 69, 53]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[66, 35, 94, 18, 80, 94, 69, 53, 18, 69, 35, 66, 94, 80, 69, 35, 53, 18]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.03965592384338379", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[95, \"_\", 80, 18], [67, 66, 35, 94], [27, 26, 69, 53]]]", "is_correct_args": "[[[95, \"_\", 80, 18], [67, 66, 35, 94], [27, 26, 69, 53]]]", "A*_args": "[\"[[95, '_', 80, 18], [67, 66, 35, 94], [27, 26, 69, 53]]\"]"}
{"diff_sorted_id": "36", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[67, 86, 68, 29], [10, 95, '_', 44], [19, 80, 6, 50]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "3", "opt_solution": "[44, 29, 68, 86, 95, 80, 6, 50, 29, 44, 80, 10, 67, 95, 86, 80, 50, 6, 10, 50, 44, 29]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.07417702674865723", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[67, 86, 68, 29], [10, 95, \"_\", 44], [19, 80, 6, 50]]]", "is_correct_args": "[[[67, 86, 68, 29], [10, 95, \"_\", 44], [19, 80, 6, 50]]]", "A*_args": "[\"[[67, 86, 68, 29], [10, 95, '_', 44], [19, 80, 6, 50]]\"]"}
{"diff_sorted_id": "37", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[12, 78, 19, '_'], [94, 66, 67, 49], [28, 83, 31, 47]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[49, 67, 19, 78, 12, 94, 66, 12, 78, 49, 67, 47, 31, 19, 12, 83, 19, 12, 49, 78, 83, 49, 47, 31]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.03918051719665527", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[12, 78, 19, \"_\"], [94, 66, 67, 49], [28, 83, 31, 47]]]", "is_correct_args": "[[[12, 78, 19, \"_\"], [94, 66, 67, 49], [28, 83, 31, 47]]]", "A*_args": "[\"[[12, 78, 19, '_'], [94, 66, 67, 49], [28, 83, 31, 47]]\"]"}
{"diff_sorted_id": "38", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[75, 59, 74, 73], ['_', 79, 26, 17], [64, 29, 47, 39]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[79, 26, 17, 73, 74, 59, 75, 79, 64, 29, 47, 17, 59, 74, 73, 39, 17, 47, 26, 59, 47, 17]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.22814416885375977", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[75, 59, 74, 73], [\"_\", 79, 26, 17], [64, 29, 47, 39]]]", "is_correct_args": "[[[75, 59, 74, 73], [\"_\", 79, 26, 17], [64, 29, 47, 39]]]", "A*_args": "[\"[[75, 59, 74, 73], ['_', 79, 26, 17], [64, 29, 47, 39]]\"]"}
{"diff_sorted_id": "39", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[30, 39, 59, 78], [100, 57, 55, 48], [82, '_', 15, 88]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[15, 88, 48, 55, 57, 39, 59, 57, 88, 15, 39, 100, 30, 59, 100, 30, 82, 39, 30, 82, 59, 100, 57, 88, 82, 57, 88, 82, 55, 48]", "opt_solution_cost": "30", "opt_solution_compute_t": "0.43415212631225586", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[30, 39, 59, 78], [100, 57, 55, 48], [82, \"_\", 15, 88]]]", "is_correct_args": "[[[30, 39, 59, 78], [100, 57, 55, 48], [82, \"_\", 15, 88]]]", "A*_args": "[\"[[30, 39, 59, 78], [100, 57, 55, 48], [82, '_', 15, 88]]\"]"}
{"diff_sorted_id": "40", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[28, 11, 50, 15], [94, 93, '_', 26], [34, 7, 3, 82]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[26, 82, 3, 7, 34, 94, 93, 11, 28, 93, 94, 34, 11, 26, 82, 15, 50, 82, 26, 28, 93, 94, 34, 11, 7, 3]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.45993494987487793", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[28, 11, 50, 15], [94, 93, \"_\", 26], [34, 7, 3, 82]]]", "is_correct_args": "[[[28, 11, 50, 15], [94, 93, \"_\", 26], [34, 7, 3, 82]]]", "A*_args": "[\"[[28, 11, 50, 15], [94, 93, '_', 26], [34, 7, 3, 82]]\"]"}
{"diff_sorted_id": "41", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[81, 10, 54, '_'], [89, 77, 33, 29], [26, 44, 61, 18]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[54, 33, 61, 18, 29, 54, 33, 61, 54, 33, 61, 10, 77, 54, 10, 77, 81, 89, 54, 44, 18, 10, 33, 29]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.06885409355163574", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[81, 10, 54, \"_\"], [89, 77, 33, 29], [26, 44, 61, 18]]]", "is_correct_args": "[[[81, 10, 54, \"_\"], [89, 77, 33, 29], [26, 44, 61, 18]]]", "A*_args": "[\"[[81, 10, 54, '_'], [89, 77, 33, 29], [26, 44, 61, 18]]\"]"}
{"diff_sorted_id": "42", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[74, 37, 2, 22], [4, 21, '_', 54], [33, 70, 9, 11]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[2, 37, 21, 70, 9, 2, 37, 22, 54, 37, 22, 21, 70, 4, 33, 9, 4, 22, 21, 54, 37, 11]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.05596041679382324", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[74, 37, 2, 22], [4, 21, \"_\", 54], [33, 70, 9, 11]]]", "is_correct_args": "[[[74, 37, 2, 22], [4, 21, \"_\", 54], [33, 70, 9, 11]]]", "A*_args": "[\"[[74, 37, 2, 22], [4, 21, '_', 54], [33, 70, 9, 11]]\"]"}
{"diff_sorted_id": "43", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[52, '_', 99, 42], [56, 67, 49, 68], [88, 23, 33, 26]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[99, 49, 68, 42, 49, 68, 67, 23, 88, 56, 52, 99, 68, 67, 23, 88, 33, 26, 42, 49, 67, 68, 88, 52, 56, 33, 26, 23, 49, 42]", "opt_solution_cost": "30", "opt_solution_compute_t": "0.6710901260375977", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[52, \"_\", 99, 42], [56, 67, 49, 68], [88, 23, 33, 26]]]", "is_correct_args": "[[[52, \"_\", 99, 42], [56, 67, 49, 68], [88, 23, 33, 26]]]", "A*_args": "[\"[[52, '_', 99, 42], [56, 67, 49, 68], [88, 23, 33, 26]]\"]"}
{"diff_sorted_id": "44", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[81, '_', 58, 10], [85, 22, 23, 54], [100, 21, 27, 12]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[22, 23, 54, 10, 58, 22, 23, 54, 22, 23, 81, 85, 100, 21, 27, 12, 10, 22, 23, 81, 85, 100, 54, 27, 12, 10]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.062206268310546875", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[81, \"_\", 58, 10], [85, 22, 23, 54], [100, 21, 27, 12]]]", "is_correct_args": "[[[81, \"_\", 58, 10], [85, 22, 23, 54], [100, 21, 27, 12]]]", "A*_args": "[\"[[81, '_', 58, 10], [85, 22, 23, 54], [100, 21, 27, 12]]\"]"}
{"diff_sorted_id": "45", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[11, 55, 69, 67], [19, 31, '_', 35], [64, 65, 88, 96]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[31, 19, 64, 65, 19, 31, 88, 96, 35, 67, 69, 88, 96, 19, 31, 96, 88, 55, 11, 64, 96, 11, 55, 88, 11, 55, 64, 96, 65, 31, 19, 11, 55, 64, 88, 69, 67, 35]", "opt_solution_cost": "38", "opt_solution_compute_t": "18.521990299224854", "solution_depth": "38", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[11, 55, 69, 67], [19, 31, \"_\", 35], [64, 65, 88, 96]]]", "is_correct_args": "[[[11, 55, 69, 67], [19, 31, \"_\", 35], [64, 65, 88, 96]]]", "A*_args": "[\"[[11, 55, 69, 67], [19, 31, '_', 35], [64, 65, 88, 96]]\"]"}
{"diff_sorted_id": "46", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[85, '_', 61, 100], [45, 77, 10, 91], [83, 57, 95, 39]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[85, 45, 77, 85, 61, 100, 91, 10, 85, 57, 95, 39, 10, 85, 57, 61, 100, 91, 85, 57, 61, 95, 83, 77, 45, 100, 95, 83, 77, 45, 83, 77, 39, 10]", "opt_solution_cost": "34", "opt_solution_compute_t": "2.4867141246795654", "solution_depth": "34", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[85, \"_\", 61, 100], [45, 77, 10, 91], [83, 57, 95, 39]]]", "is_correct_args": "[[[85, \"_\", 61, 100], [45, 77, 10, 91], [83, 57, 95, 39]]]", "A*_args": "[\"[[85, '_', 61, 100], [45, 77, 10, 91], [83, 57, 95, 39]]\"]"}
{"diff_sorted_id": "47", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[69, 92, 89, 72], [82, 13, 65, 59], [45, '_', 67, 8]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[13, 82, 45, 13, 67, 65, 82, 67, 13, 45, 69, 92, 89, 82, 65, 8]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.043500661849975586", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[69, 92, 89, 72], [82, 13, 65, 59], [45, \"_\", 67, 8]]]", "is_correct_args": "[[[69, 92, 89, 72], [82, 13, 65, 59], [45, \"_\", 67, 8]]]", "A*_args": "[\"[[69, 92, 89, 72], [82, 13, 65, 59], [45, '_', 67, 8]]\"]"}
{"diff_sorted_id": "48", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[79, 98, 87, 83], [56, 76, 65, 91], [25, '_', 36, 70]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[25, 56, 76, 25, 36, 65, 91, 83, 87, 91, 25, 76, 79, 98, 91, 87, 83, 70, 65, 25, 70, 65]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.1393580436706543", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[79, 98, 87, 83], [56, 76, 65, 91], [25, \"_\", 36, 70]]]", "is_correct_args": "[[[79, 98, 87, 83], [56, 76, 65, 91], [25, \"_\", 36, 70]]]", "A*_args": "[\"[[79, 98, 87, 83], [56, 76, 65, 91], [25, '_', 36, 70]]\"]"}
{"diff_sorted_id": "49", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[82, '_', 39, 54], [55, 62, 53, 35], [69, 16, 11, 71]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[62, 53, 35, 71, 11, 35, 53, 16, 35, 53, 71, 54, 39, 62, 82, 55, 69, 35, 16, 69, 55, 82, 69, 71, 54, 39, 62, 69, 71, 54, 53, 11]", "opt_solution_cost": "32", "opt_solution_compute_t": "0.6614413261413574", "solution_depth": "32", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[82, \"_\", 39, 54], [55, 62, 53, 35], [69, 16, 11, 71]]]", "is_correct_args": "[[[82, \"_\", 39, 54], [55, 62, 53, 35], [69, 16, 11, 71]]]", "A*_args": "[\"[[82, '_', 39, 54], [55, 62, 53, 35], [69, 16, 11, 71]]\"]"}
{"diff_sorted_id": "50", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[25, 94, 12, '_'], [70, 43, 47, 85], [86, 64, 52, 92]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[85, 47, 12, 94, 25, 70, 43, 64, 86, 43, 64, 12, 52, 92, 47, 52, 92, 86, 12, 25, 94, 92, 86, 12, 25, 64, 70, 94, 92, 86, 52, 47]", "opt_solution_cost": "32", "opt_solution_compute_t": "0.6588661670684814", "solution_depth": "32", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[25, 94, 12, \"_\"], [70, 43, 47, 85], [86, 64, 52, 92]]]", "is_correct_args": "[[[25, 94, 12, \"_\"], [70, 43, 47, 85], [86, 64, 52, 92]]]", "A*_args": "[\"[[25, 94, 12, '_'], [70, 43, 47, 85], [86, 64, 52, 92]]\"]"}
{"diff_sorted_id": "51", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[96, 53, 19, 15], [37, 32, '_', 87], [78, 100, 17, 13]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[32, 37, 78, 100, 17, 32, 37, 78, 100, 17, 32, 37, 78, 53, 19, 15, 87, 78, 15, 19, 96, 100, 53, 15, 19, 87, 78, 19, 37, 32, 15, 37, 32, 13]", "opt_solution_cost": "34", "opt_solution_compute_t": "2.2093515396118164", "solution_depth": "34", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[96, 53, 19, 15], [37, 32, \"_\", 87], [78, 100, 17, 13]]]", "is_correct_args": "[[[96, 53, 19, 15], [37, 32, \"_\", 87], [78, 100, 17, 13]]]", "A*_args": "[\"[[96, 53, 19, 15], [37, 32, '_', 87], [78, 100, 17, 13]]\"]"}
{"diff_sorted_id": "52", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[26, 39, 50, 35], ['_', 67, 2, 71], [48, 41, 37, 56]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[67, 2, 71, 56, 37, 41, 2, 71, 50, 35, 56, 50, 35, 39, 26, 67, 71, 35, 41, 2, 35, 26, 67, 71, 48, 35, 26, 41, 39, 56, 50, 37]", "opt_solution_cost": "32", "opt_solution_compute_t": "0.40317821502685547", "solution_depth": "32", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[26, 39, 50, 35], [\"_\", 67, 2, 71], [48, 41, 37, 56]]]", "is_correct_args": "[[[26, 39, 50, 35], [\"_\", 67, 2, 71], [48, 41, 37, 56]]]", "A*_args": "[\"[[26, 39, 50, 35], ['_', 67, 2, 71], [48, 41, 37, 56]]\"]"}
{"diff_sorted_id": "53", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[38, 98, 84, 33], [63, 30, 61, 93], [73, 89, 85, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[85, 61, 84, 33, 93, 85, 61, 84, 30, 89, 84, 30, 33, 93, 85, 61, 30, 33, 89, 63, 38, 98, 93, 89, 63, 84, 73, 38, 84, 73, 33, 30]", "opt_solution_cost": "32", "opt_solution_compute_t": "0.45055198669433594", "solution_depth": "32", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[38, 98, 84, 33], [63, 30, 61, 93], [73, 89, 85, \"_\"]]]", "is_correct_args": "[[[38, 98, 84, 33], [63, 30, 61, 93], [73, 89, 85, \"_\"]]]", "A*_args": "[\"[[38, 98, 84, 33], [63, 30, 61, 93], [73, 89, 85, '_']]\"]"}
{"diff_sorted_id": "54", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[100, '_', 99, 84], [59, 20, 56, 64], [74, 6, 57, 83]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[20, 56, 64, 83, 57, 6, 56, 59, 74, 56, 59, 20, 99, 84, 83, 57, 6, 59, 20, 64, 59, 6]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.07044315338134766", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[100, \"_\", 99, 84], [59, 20, 56, 64], [74, 6, 57, 83]]]", "is_correct_args": "[[[100, \"_\", 99, 84], [59, 20, 56, 64], [74, 6, 57, 83]]]", "A*_args": "[\"[[100, '_', 99, 84], [59, 20, 56, 64], [74, 6, 57, 83]]\"]"}
{"diff_sorted_id": "55", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[34, 68, 46, 20], [12, 18, '_', 5], [53, 7, 65, 47]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[18, 68, 46, 18, 65, 47, 5, 20, 18, 65, 47, 7, 53, 12, 34, 46, 65, 47, 20, 18, 47, 65, 68, 53, 7, 20, 53, 34, 46, 68, 65, 53, 20, 5]", "opt_solution_cost": "34", "opt_solution_compute_t": "3.4830353260040283", "solution_depth": "34", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[34, 68, 46, 20], [12, 18, \"_\", 5], [53, 7, 65, 47]]]", "is_correct_args": "[[[34, 68, 46, 20], [12, 18, \"_\", 5], [53, 7, 65, 47]]]", "A*_args": "[\"[[34, 68, 46, 20], [12, 18, '_', 5], [53, 7, 65, 47]]\"]"}
{"diff_sorted_id": "56", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[66, 96, 24, 10], [79, 33, 84, 100], [22, 80, 15, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[15, 84, 100, 10, 24, 100, 84, 80, 33, 96, 100, 84, 80, 33, 22, 79, 66, 100, 84, 80, 33, 15, 10, 24, 80, 84, 96, 66, 79, 22, 15, 10]", "opt_solution_cost": "32", "opt_solution_compute_t": "1.4827980995178223", "solution_depth": "32", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[66, 96, 24, 10], [79, 33, 84, 100], [22, 80, 15, \"_\"]]]", "is_correct_args": "[[[66, 96, 24, 10], [79, 33, 84, 100], [22, 80, 15, \"_\"]]]", "A*_args": "[\"[[66, 96, 24, 10], [79, 33, 84, 100], [22, 80, 15, '_']]\"]"}
{"diff_sorted_id": "57", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[71, 42, 22, 90], [79, 78, '_', 68], [25, 58, 28, 12]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[28, 12, 68, 28, 22, 90, 28, 68, 12, 22, 90, 42, 78, 90, 68, 28, 42, 78, 71, 79, 90, 68, 78, 71, 79, 90, 68, 58, 22, 12, 28, 42, 71, 78, 42, 28]", "opt_solution_cost": "36", "opt_solution_compute_t": "6.940868616104126", "solution_depth": "36", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[71, 42, 22, 90], [79, 78, \"_\", 68], [25, 58, 28, 12]]]", "is_correct_args": "[[[71, 42, 22, 90], [79, 78, \"_\", 68], [25, 58, 28, 12]]]", "A*_args": "[\"[[71, 42, 22, 90], [79, 78, '_', 68], [25, 58, 28, 12]]\"]"}
{"diff_sorted_id": "58", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[94, 91, 92, 46], [6, 86, '_', 10], [12, 58, 73, 75]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[86, 91, 92, 86, 91, 58, 73, 75, 10, 46, 86, 91, 58, 6, 12, 73, 75, 10, 46, 58, 6, 75, 73, 12, 75, 73, 10, 6, 58, 46]", "opt_solution_cost": "30", "opt_solution_compute_t": "1.039477825164795", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[94, 91, 92, 46], [6, 86, \"_\", 10], [12, 58, 73, 75]]]", "is_correct_args": "[[[94, 91, 92, 46], [6, 86, \"_\", 10], [12, 58, 73, 75]]]", "A*_args": "[\"[[94, 91, 92, 46], [6, 86, '_', 10], [12, 58, 73, 75]]\"]"}
{"diff_sorted_id": "59", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[10, 96, 60, '_'], [98, 73, 14, 58], [53, 3, 21, 67]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[58, 67, 21, 3, 53, 98, 10, 96, 73, 14, 60, 58, 67, 21, 3, 53, 14, 10, 98, 14, 10, 60, 58, 73, 96, 98, 60, 58, 53, 3]", "opt_solution_cost": "30", "opt_solution_compute_t": "0.15825581550598145", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[10, 96, 60, \"_\"], [98, 73, 14, 58], [53, 3, 21, 67]]]", "is_correct_args": "[[[10, 96, 60, \"_\"], [98, 73, 14, 58], [53, 3, 21, 67]]]", "A*_args": "[\"[[10, 96, 60, '_'], [98, 73, 14, 58], [53, 3, 21, 67]]\"]"}
{"diff_sorted_id": "60", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[31, 92, 67, 69], [87, 35, 42, 72], [53, '_', 28, 19]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[28, 42, 72, 69, 67, 72, 35, 87, 31, 92, 72, 67, 69, 35, 67, 72, 87, 67, 42, 28, 53, 31, 67, 53, 28, 19]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.2203352451324463", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "12", "is_feasible_args": "[[[31, 92, 67, 69], [87, 35, 42, 72], [53, \"_\", 28, 19]]]", "is_correct_args": "[[[31, 92, 67, 69], [87, 35, 42, 72], [53, \"_\", 28, 19]]]", "A*_args": "[\"[[31, 92, 67, 69], [87, 35, 42, 72], [53, '_', 28, 19]]\"]"}
{"diff_sorted_id": "61", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[93, 83, 50, 21, 67], [59, '_', 60, 19, 8], [14, 12, 92, 54, 9]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[12, 92, 54, 9, 8, 19, 60, 12, 92, 54, 12, 50, 83, 92, 54, 12, 9, 8, 19, 60, 21, 67, 60, 19]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.06862807273864746", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[93, 83, 50, 21, 67], [59, \"_\", 60, 19, 8], [14, 12, 92, 54, 9]]]", "is_correct_args": "[[[93, 83, 50, 21, 67], [59, \"_\", 60, 19, 8], [14, 12, 92, 54, 9]]]", "A*_args": "[\"[[93, 83, 50, 21, 67], [59, '_', 60, 19, 8], [14, 12, 92, 54, 9]]\"]"}
{"diff_sorted_id": "62", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[87, 49, 79, 68, '_'], [56, 19, 64, 37, 7], [27, 15, 41, 35, 78]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[68, 37, 7, 78, 35, 7, 78, 68, 37, 78, 64, 41, 15, 19, 49, 79, 78, 37, 68, 64, 37, 68, 64, 35]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.16290855407714844", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[87, 49, 79, 68, \"_\"], [56, 19, 64, 37, 7], [27, 15, 41, 35, 78]]]", "is_correct_args": "[[[87, 49, 79, 68, \"_\"], [56, 19, 64, 37, 7], [27, 15, 41, 35, 78]]]", "A*_args": "[\"[[87, 49, 79, 68, '_'], [56, 19, 64, 37, 7], [27, 15, 41, 35, 78]]\"]"}
{"diff_sorted_id": "63", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[98, 80, 41, 91, 88], [75, 93, 24, '_', 12], [38, 37, 49, 65, 43]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[65, 49, 24, 65, 91, 41, 80, 93, 65, 91, 49, 43, 12, 88, 41, 80, 91, 49, 88, 41, 80, 88, 43, 12]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.1251230239868164", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[98, 80, 41, 91, 88], [75, 93, 24, \"_\", 12], [38, 37, 49, 65, 43]]]", "is_correct_args": "[[[98, 80, 41, 91, 88], [75, 93, 24, \"_\", 12], [38, 37, 49, 65, 43]]]", "A*_args": "[\"[[98, 80, 41, 91, 88], [75, 93, 24, '_', 12], [38, 37, 49, 65, 43]]\"]"}
{"diff_sorted_id": "64", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[54, 100, 91, 80, 56], [19, '_', 38, 74, 29], [14, 36, 44, 13, 10]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[36, 44, 38, 36, 44, 14, 19, 54, 100, 91, 80, 74, 36, 38, 13, 10]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.03679513931274414", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[54, 100, 91, 80, 56], [19, \"_\", 38, 74, 29], [14, 36, 44, 13, 10]]]", "is_correct_args": "[[[54, 100, 91, 80, 56], [19, \"_\", 38, 74, 29], [14, 36, 44, 13, 10]]]", "A*_args": "[\"[[54, 100, 91, 80, 56], [19, '_', 38, 74, 29], [14, 36, 44, 13, 10]]\"]"}
{"diff_sorted_id": "65", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[94, 93, 84, 27, 6], [55, 18, 91, 82, 8], [19, 32, 37, 30, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[8, 6, 27, 82, 30, 8, 6, 27, 82, 84, 91, 37, 32, 18, 37, 32, 8, 6]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.03599905967712402", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[94, 93, 84, 27, 6], [55, 18, 91, 82, 8], [19, 32, 37, 30, \"_\"]]]", "is_correct_args": "[[[94, 93, 84, 27, 6], [55, 18, 91, 82, 8], [19, 32, 37, 30, \"_\"]]]", "A*_args": "[\"[[94, 93, 84, 27, 6], [55, 18, 91, 82, 8], [19, 32, 37, 30, '_']]\"]"}
{"diff_sorted_id": "66", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[94, 91, 33, 29, 78], [97, 20, 14, 54, 25], [38, 22, 32, 17, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "4", "opt_solution": "[25, 54, 14, 33, 91, 94, 97, 38, 22, 20, 33, 32, 17, 14, 29, 78, 54, 25]", "opt_solution_cost": "18", "opt_solution_compute_t": "0.03129744529724121", "solution_depth": "18", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[94, 91, 33, 29, 78], [97, 20, 14, 54, 25], [38, 22, 32, 17, \"_\"]]]", "is_correct_args": "[[[94, 91, 33, 29, 78], [97, 20, 14, 54, 25], [38, 22, 32, 17, \"_\"]]]", "A*_args": "[\"[[94, 91, 33, 29, 78], [97, 20, 14, 54, 25], [38, 22, 32, 17, '_']]\"]"}
{"diff_sorted_id": "67", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[58, 51, 56, 43, 33], [91, 71, 21, 14, 24], [46, 45, '_', 17, 13]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[21, 56, 51, 58, 91, 71, 45, 21, 17, 14, 43, 51, 56, 45, 71, 46, 21, 17, 14, 13, 24, 33, 51, 56, 58, 71, 45, 43, 33, 24]", "opt_solution_cost": "30", "opt_solution_compute_t": "0.723954439163208", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[58, 51, 56, 43, 33], [91, 71, 21, 14, 24], [46, 45, \"_\", 17, 13]]]", "is_correct_args": "[[[58, 51, 56, 43, 33], [91, 71, 21, 14, 24], [46, 45, \"_\", 17, 13]]]", "A*_args": "[\"[[58, 51, 56, 43, 33], [91, 71, 21, 14, 24], [46, 45, '_', 17, 13]]\"]"}
{"diff_sorted_id": "68", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[72, 92, '_', 78, 74], [70, 67, 85, 75, 66], [48, 42, 32, 26, 50]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[85, 67, 70, 72, 92, 85, 78, 75, 66, 50]", "opt_solution_cost": "10", "opt_solution_compute_t": "0.019316434860229492", "solution_depth": "10", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[72, 92, \"_\", 78, 74], [70, 67, 85, 75, 66], [48, 42, 32, 26, 50]]]", "is_correct_args": "[[[72, 92, \"_\", 78, 74], [70, 67, 85, 75, 66], [48, 42, 32, 26, 50]]]", "A*_args": "[\"[[72, 92, '_', 78, 74], [70, 67, 85, 75, 66], [48, 42, 32, 26, 50]]\"]"}
{"diff_sorted_id": "69", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [['_', 83, 11, 57, 59], [89, 61, 99, 76, 63], [42, 35, 25, 48, 54]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[83, 11, 57, 59, 63, 54, 48, 25, 35, 61, 99, 57, 11, 83, 89, 99, 61, 35, 57, 11, 59, 76, 11, 59, 83, 89, 99, 61, 59, 57, 25, 11, 54, 48]", "opt_solution_cost": "34", "opt_solution_compute_t": "3.8137171268463135", "solution_depth": "34", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[\"_\", 83, 11, 57, 59], [89, 61, 99, 76, 63], [42, 35, 25, 48, 54]]]", "is_correct_args": "[[[\"_\", 83, 11, 57, 59], [89, 61, 99, 76, 63], [42, 35, 25, 48, 54]]]", "A*_args": "[\"[['_', 83, 11, 57, 59], [89, 61, 99, 76, 63], [42, 35, 25, 48, 54]]\"]"}
{"diff_sorted_id": "70", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[86, 100, 92, 37, 95], [88, '_', 97, 10, 67], [32, 82, 19, 53, 4]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[88, 86, 100, 88, 97, 10, 67, 95, 37, 92, 88, 97, 82, 19, 10, 67, 92, 88, 67, 92, 95, 37, 88, 95, 92, 67, 95, 92, 53, 4]", "opt_solution_cost": "30", "opt_solution_compute_t": "0.4556577205657959", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[86, 100, 92, 37, 95], [88, \"_\", 97, 10, 67], [32, 82, 19, 53, 4]]]", "is_correct_args": "[[[86, 100, 92, 37, 95], [88, \"_\", 97, 10, 67], [32, 82, 19, 53, 4]]]", "A*_args": "[\"[[86, 100, 92, 37, 95], [88, '_', 97, 10, 67], [32, 82, 19, 53, 4]]\"]"}
{"diff_sorted_id": "71", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[91, 86, 16, 48, 81], [13, 89, 5, '_', 58], [54, 22, 36, 37, 31]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[37, 36, 5, 16, 86, 89, 13, 54, 22, 13, 16, 37, 48, 86, 37, 48, 36, 5, 13, 16, 48, 37, 86, 81, 58, 31]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.15856218338012695", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[91, 86, 16, 48, 81], [13, 89, 5, \"_\", 58], [54, 22, 36, 37, 31]]]", "is_correct_args": "[[[91, 86, 16, 48, 81], [13, 89, 5, \"_\", 58], [54, 22, 36, 37, 31]]]", "A*_args": "[\"[[91, 86, 16, 48, 81], [13, 89, 5, '_', 58], [54, 22, 36, 37, 31]]\"]"}
{"diff_sorted_id": "72", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [['_', 92, 90, 50, 40], [52, 39, 31, 83, 16], [36, 56, 51, 70, 49]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[52, 39, 56, 51, 31, 56, 51, 36, 39, 52, 92, 90, 50, 83, 56, 50, 83, 56, 70, 49, 16, 40, 56, 70, 49, 16]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.03201866149902344", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[\"_\", 92, 90, 50, 40], [52, 39, 31, 83, 16], [36, 56, 51, 70, 49]]]", "is_correct_args": "[[[\"_\", 92, 90, 50, 40], [52, 39, 31, 83, 16], [36, 56, 51, 70, 49]]]", "A*_args": "[\"[['_', 92, 90, 50, 40], [52, 39, 31, 83, 16], [36, 56, 51, 70, 49]]\"]"}
{"diff_sorted_id": "73", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[96, 93, '_', 26, 66], [46, 59, 38, 92, 50], [27, 7, 39, 77, 18]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[26, 92, 50, 18, 77, 39, 38, 59, 46, 96, 93, 46, 59, 26, 46, 93, 96, 59, 26, 50, 18, 77, 39, 38, 7, 26, 50, 18, 77, 39, 38, 7, 18, 46, 92, 77, 39, 38]", "opt_solution_cost": "38", "opt_solution_compute_t": "20.599369525909424", "solution_depth": "38", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[96, 93, \"_\", 26, 66], [46, 59, 38, 92, 50], [27, 7, 39, 77, 18]]]", "is_correct_args": "[[[96, 93, \"_\", 26, 66], [46, 59, 38, 92, 50], [27, 7, 39, 77, 18]]]", "A*_args": "[\"[[96, 93, '_', 26, 66], [46, 59, 38, 92, 50], [27, 7, 39, 77, 18]]\"]"}
{"diff_sorted_id": "74", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[49, 20, 77, 78, 57], [41, '_', 52, 44, 72], [27, 81, 45, 16, 46]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[81, 27, 41, 81, 52, 45, 16, 44, 72, 46, 44, 16, 45, 77, 20, 49, 81, 52, 77, 20, 78, 72, 46, 44, 16, 45, 20, 77, 49, 78, 77, 46, 45, 16]", "opt_solution_cost": "34", "opt_solution_compute_t": "2.7185001373291016", "solution_depth": "34", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[49, 20, 77, 78, 57], [41, \"_\", 52, 44, 72], [27, 81, 45, 16, 46]]]", "is_correct_args": "[[[49, 20, 77, 78, 57], [41, \"_\", 52, 44, 72], [27, 81, 45, 16, 46]]]", "A*_args": "[\"[[49, 20, 77, 78, 57], [41, '_', 52, 44, 72], [27, 81, 45, 16, 46]]\"]"}
{"diff_sorted_id": "75", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [['_', 67, 21, 97, 69], [61, 68, 55, 16, 73], [42, 41, 31, 83, 53]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[61, 42, 41, 31, 55, 21, 97, 16, 21, 68, 31, 55, 83, 21, 73, 69, 16, 73, 68, 83, 55, 31, 42, 61, 67, 97, 83, 42, 61, 67, 97, 83, 73, 68, 69, 16, 68, 69, 42, 55, 21, 53, 16, 42, 53, 16]", "opt_solution_cost": "46", "opt_solution_compute_t": "68.0147922039032", "solution_depth": "46", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[\"_\", 67, 21, 97, 69], [61, 68, 55, 16, 73], [42, 41, 31, 83, 53]]]", "is_correct_args": "[[[\"_\", 67, 21, 97, 69], [61, 68, 55, 16, 73], [42, 41, 31, 83, 53]]]", "A*_args": "[\"[['_', 67, 21, 97, 69], [61, 68, 55, 16, 73], [42, 41, 31, 83, 53]]\"]"}
{"diff_sorted_id": "76", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[86, 78, 77, 39, 76], [54, 45, 25, 59, 21], [38, 46, 43, 27, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[21, 59, 25, 43, 27, 25, 39, 76, 59, 39, 43, 45, 46, 27, 25, 21]", "opt_solution_cost": "16", "opt_solution_compute_t": "0.03995919227600098", "solution_depth": "16", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[86, 78, 77, 39, 76], [54, 45, 25, 59, 21], [38, 46, 43, 27, \"_\"]]]", "is_correct_args": "[[[86, 78, 77, 39, 76], [54, 45, 25, 59, 21], [38, 46, 43, 27, \"_\"]]]", "A*_args": "[\"[[86, 78, 77, 39, 76], [54, 45, 25, 59, 21], [38, 46, 43, 27, '_']]\"]"}
{"diff_sorted_id": "77", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[60, 66, 46, 8, 36], [81, '_', 88, 70, 24], [20, 17, 6, 62, 28]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[88, 46, 66, 88, 81, 60, 88, 81, 46, 70, 8, 66, 70, 8, 24, 28, 62, 24, 28, 36, 66, 28, 36, 62, 24, 6, 8, 36, 28, 66, 62, 24]", "opt_solution_cost": "32", "opt_solution_compute_t": "1.3497884273529053", "solution_depth": "32", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[60, 66, 46, 8, 36], [81, \"_\", 88, 70, 24], [20, 17, 6, 62, 28]]]", "is_correct_args": "[[[60, 66, 46, 8, 36], [81, \"_\", 88, 70, 24], [20, 17, 6, 62, 28]]]", "A*_args": "[\"[[60, 66, 46, 8, 36], [81, '_', 88, 70, 24], [20, 17, 6, 62, 28]]\"]"}
{"diff_sorted_id": "78", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[94, 92, 77, 88, '_'], [82, 43, 76, 85, 87], [24, 66, 17, 79, 75]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[87, 85, 76, 17, 66, 24, 82, 43, 24, 66, 17, 24, 43, 82, 66, 17, 79, 76, 24, 79, 17, 43, 79, 24, 76, 17, 24, 77, 88, 87, 85, 75]", "opt_solution_cost": "32", "opt_solution_compute_t": "4.894534587860107", "solution_depth": "32", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[94, 92, 77, 88, \"_\"], [82, 43, 76, 85, 87], [24, 66, 17, 79, 75]]]", "is_correct_args": "[[[94, 92, 77, 88, \"_\"], [82, 43, 76, 85, 87], [24, 66, 17, 79, 75]]]", "A*_args": "[\"[[94, 92, 77, 88, '_'], [82, 43, 76, 85, 87], [24, 66, 17, 79, 75]]\"]"}
{"diff_sorted_id": "79", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[42, 89, 21, 58, 67], [54, 32, 99, 69, 38], [77, 33, '_', 39, 16]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[99, 32, 89, 42, 54, 77, 33, 99, 32, 21, 42, 54, 77, 89, 99, 32, 21, 42, 58, 69, 42, 58, 54, 77, 89, 99, 58, 54, 77, 89, 99, 58, 54, 42, 39, 16]", "opt_solution_cost": "36", "opt_solution_compute_t": "5.105415344238281", "solution_depth": "36", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[42, 89, 21, 58, 67], [54, 32, 99, 69, 38], [77, 33, \"_\", 39, 16]]]", "is_correct_args": "[[[42, 89, 21, 58, 67], [54, 32, 99, 69, 38], [77, 33, \"_\", 39, 16]]]", "A*_args": "[\"[[42, 89, 21, 58, 67], [54, 32, 99, 69, 38], [77, 33, '_', 39, 16]]\"]"}
{"diff_sorted_id": "80", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[97, 78, '_', 9, 67], [18, 65, 52, 27, 66], [38, 92, 50, 14, 6]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[9, 67, 66, 27, 14, 50, 92, 38, 18, 65, 52, 92, 38, 52, 92, 14, 50, 38, 14, 9, 78, 92, 52, 14, 9, 50, 38, 6]", "opt_solution_cost": "28", "opt_solution_compute_t": "0.24241900444030762", "solution_depth": "28", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[97, 78, \"_\", 9, 67], [18, 65, 52, 27, 66], [38, 92, 50, 14, 6]]]", "is_correct_args": "[[[97, 78, \"_\", 9, 67], [18, 65, 52, 27, 66], [38, 92, 50, 14, 6]]]", "A*_args": "[\"[[97, 78, '_', 9, 67], [18, 65, 52, 27, 66], [38, 92, 50, 14, 6]]\"]"}
{"diff_sorted_id": "81", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[12, 76, '_', 72, 53], [61, 97, 49, 65, 52], [89, 64, 22, 26, 13]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[72, 65, 49, 22, 26, 13, 52, 53, 65, 72, 76, 12, 61, 89, 64, 26, 22, 76, 12, 61, 89, 97, 61, 89, 97, 64, 26, 22, 13, 49, 53, 65, 72, 12, 76, 53, 12, 72, 65, 52, 49, 12, 52, 49]", "opt_solution_cost": "44", "opt_solution_compute_t": "85.10252380371094", "solution_depth": "44", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[12, 76, \"_\", 72, 53], [61, 97, 49, 65, 52], [89, 64, 22, 26, 13]]]", "is_correct_args": "[[[12, 76, \"_\", 72, 53], [61, 97, 49, 65, 52], [89, 64, 22, 26, 13]]]", "A*_args": "[\"[[12, 76, '_', 72, 53], [61, 97, 49, 65, 52], [89, 64, 22, 26, 13]]\"]"}
{"diff_sorted_id": "82", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[60, 70, 88, 51, 72], [87, 43, 39, 85, 30], ['_', 64, 27, 84, 47]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[87, 60, 70, 88, 51, 85, 84, 27, 64, 43, 60, 87, 43, 64, 39, 51, 85, 84, 30, 47, 27, 30, 51, 60, 87, 70, 88, 87, 64, 39, 30, 27]", "opt_solution_cost": "32", "opt_solution_compute_t": "0.7831065654754639", "solution_depth": "32", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[60, 70, 88, 51, 72], [87, 43, 39, 85, 30], [\"_\", 64, 27, 84, 47]]]", "is_correct_args": "[[[60, 70, 88, 51, 72], [87, 43, 39, 85, 30], [\"_\", 64, 27, 84, 47]]]", "A*_args": "[\"[[60, 70, 88, 51, 72], [87, 43, 39, 85, 30], ['_', 64, 27, 84, 47]]\"]"}
{"diff_sorted_id": "83", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[79, 82, 80, 67, 45], [51, '_', 63, 41, 5], [39, 99, 31, 16, 50]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[82, 79, 51, 82, 63, 80, 79, 51, 82, 63, 99, 39, 63, 99, 51, 82, 99, 63, 39, 31, 16, 50, 5, 41, 50, 5, 41, 45, 67, 79, 80, 50, 45, 41]", "opt_solution_cost": "34", "opt_solution_compute_t": "4.1595001220703125", "solution_depth": "34", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[79, 82, 80, 67, 45], [51, \"_\", 63, 41, 5], [39, 99, 31, 16, 50]]]", "is_correct_args": "[[[79, 82, 80, 67, 45], [51, \"_\", 63, 41, 5], [39, 99, 31, 16, 50]]]", "A*_args": "[\"[[79, 82, 80, 67, 45], [51, '_', 63, 41, 5], [39, 99, 31, 16, 50]]\"]"}
{"diff_sorted_id": "84", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[85, 96, 29, 80, 12], [60, '_', 76, 42, 82], [27, 89, 72, 37, 55]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "7", "opt_solution": "[96, 85, 60, 96, 76, 29, 85, 60, 96, 76, 89, 72, 37, 42, 82, 12, 80, 85, 60, 89, 72, 27, 76, 72, 27, 37, 29, 27, 72, 76, 37, 29, 27, 60, 85, 82, 12, 55, 42, 12, 55, 42]", "opt_solution_cost": "42", "opt_solution_compute_t": "31.574211835861206", "solution_depth": "42", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[85, 96, 29, 80, 12], [60, \"_\", 76, 42, 82], [27, 89, 72, 37, 55]]]", "is_correct_args": "[[[85, 96, 29, 80, 12], [60, \"_\", 76, 42, 82], [27, 89, 72, 37, 55]]]", "A*_args": "[\"[[85, 96, 29, 80, 12], [60, '_', 76, 42, 82], [27, 89, 72, 37, 55]]\"]"}
{"diff_sorted_id": "85", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[93, 26, 39, 51, 69], [27, '_', 43, 7, 89], [63, 91, 23, 68, 17]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "8", "opt_solution": "[26, 39, 51, 7, 43, 23, 91, 26, 27, 63, 26, 91, 23, 27, 91, 23, 27, 51, 39, 91, 51, 43, 89, 17, 68, 27, 43, 89, 17, 68, 27, 17, 7, 39, 89, 43, 17, 7, 39, 69, 68, 27]", "opt_solution_cost": "42", "opt_solution_compute_t": "43.326194763183594", "solution_depth": "42", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[93, 26, 39, 51, 69], [27, \"_\", 43, 7, 89], [63, 91, 23, 68, 17]]]", "is_correct_args": "[[[93, 26, 39, 51, 69], [27, \"_\", 43, 7, 89], [63, 91, 23, 68, 17]]]", "A*_args": "[\"[[93, 26, 39, 51, 69], [27, '_', 43, 7, 89], [63, 91, 23, 68, 17]]\"]"}
{"diff_sorted_id": "86", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[88, 71, 83, 72, 37], [98, 43, 53, '_', 82], [24, 20, 54, 14, 21]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "8", "opt_solution": "[82, 21, 14, 82, 21, 37, 72, 83, 53, 43, 20, 54, 43, 21, 82, 43, 21, 20, 71, 88, 98, 71, 54, 21, 20, 53, 83, 82, 43, 14]", "opt_solution_cost": "30", "opt_solution_compute_t": "1.5921499729156494", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[88, 71, 83, 72, 37], [98, 43, 53, \"_\", 82], [24, 20, 54, 14, 21]]]", "is_correct_args": "[[[88, 71, 83, 72, 37], [98, 43, 53, \"_\", 82], [24, 20, 54, 14, 21]]]", "A*_args": "[\"[[88, 71, 83, 72, 37], [98, 43, 53, '_', 82], [24, 20, 54, 14, 21]]\"]"}
{"diff_sorted_id": "87", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [['_', 94, 43, 58, 77], [96, 100, 75, 84, 52], [50, 29, 60, 27, 74]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "8", "opt_solution": "[96, 100, 75, 43, 58, 84, 27, 74, 52, 77, 84, 58, 94, 96, 100, 75, 43, 60, 74, 27, 60, 74, 29, 43, 74, 60, 58, 84, 77, 52]", "opt_solution_cost": "30", "opt_solution_compute_t": "0.9509561061859131", "solution_depth": "30", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[\"_\", 94, 43, 58, 77], [96, 100, 75, 84, 52], [50, 29, 60, 27, 74]]]", "is_correct_args": "[[[\"_\", 94, 43, 58, 77], [96, 100, 75, 84, 52], [50, 29, 60, 27, 74]]]", "A*_args": "[\"[['_', 94, 43, 58, 77], [96, 100, 75, 84, 52], [50, 29, 60, 27, 74]]\"]"}
{"diff_sorted_id": "88", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[98, 74, 70, 26, 65], [91, 55, 12, '_', 68], [27, 18, 67, 40, 54]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "8", "opt_solution": "[12, 55, 91, 27, 18, 67, 55, 12, 26, 65, 68, 54, 40, 55, 12, 26, 65, 70, 74, 91, 67, 18, 27, 67, 26, 65, 55, 12, 18, 26, 65, 55, 54, 40]", "opt_solution_cost": "34", "opt_solution_compute_t": "2.9298317432403564", "solution_depth": "34", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[98, 74, 70, 26, 65], [91, 55, 12, \"_\", 68], [27, 18, 67, 40, 54]]]", "is_correct_args": "[[[98, 74, 70, 26, 65], [91, 55, 12, \"_\", 68], [27, 18, 67, 40, 54]]]", "A*_args": "[\"[[98, 74, 70, 26, 65], [91, 55, 12, '_', 68], [27, 18, 67, 40, 54]]\"]"}
{"diff_sorted_id": "89", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[71, 36, 63, 32, 15], [20, 21, 65, '_', 54], [45, 96, 29, 31, 55]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "8", "opt_solution": "[54, 55, 31, 54, 32, 15, 55, 32, 15, 63, 65, 21, 20, 45, 96, 29, 54, 15, 63, 65, 36, 71, 45, 96, 29, 20, 21, 54, 20, 21, 54, 36, 71, 45, 96, 54, 45, 71, 65, 63, 32, 31]", "opt_solution_cost": "42", "opt_solution_compute_t": "37.91888380050659", "solution_depth": "42", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[71, 36, 63, 32, 15], [20, 21, 65, \"_\", 54], [45, 96, 29, 31, 55]]]", "is_correct_args": "[[[71, 36, 63, 32, 15], [20, 21, 65, \"_\", 54], [45, 96, 29, 31, 55]]]", "A*_args": "[\"[[71, 36, 63, 32, 15], [20, 21, 65, '_', 54], [45, 96, 29, 31, 55]]\"]"}
{"diff_sorted_id": "90", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[88, 59, 84, 71, 80], [72, 79, 74, 96, 51], ['_', 28, 25, 24, 19]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "8", "opt_solution": "[28, 79, 74, 96, 24, 25, 79, 74, 96, 79, 25, 24, 79, 84, 59, 88, 72, 96, 74, 25, 24, 19, 51, 79, 71, 59, 88, 72, 96, 74, 72, 88, 84, 71, 59, 80, 79, 51]", "opt_solution_cost": "38", "opt_solution_compute_t": "19.18411660194397", "solution_depth": "38", "max_successor_states": "4", "num_vars_per_state": "15", "is_feasible_args": "[[[88, 59, 84, 71, 80], [72, 79, 74, 96, 51], [\"_\", 28, 25, 24, 19]]]", "is_correct_args": "[[[88, 59, 84, 71, 80], [72, 79, 74, 96, 51], [\"_\", 28, 25, 24, 19]]]", "A*_args": "[\"[[88, 59, 84, 71, 80], [72, 79, 74, 96, 51], ['_', 28, 25, 24, 19]]\"]"}
{"diff_sorted_id": "91", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[93, 81, 68, 57, 28, 6], [55, 54, 58, 69, 38, 10], [21, '_', 19, 44, 51, 18]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[19, 44, 51, 18, 10, 6, 28, 57, 68, 58, 69, 68, 58, 69, 44, 51, 18, 10, 6, 28, 57, 58, 68, 44, 51, 18, 10, 6]", "opt_solution_cost": "28", "opt_solution_compute_t": "0.08781838417053223", "solution_depth": "28", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[93, 81, 68, 57, 28, 6], [55, 54, 58, 69, 38, 10], [21, \"_\", 19, 44, 51, 18]]]", "is_correct_args": "[[[93, 81, 68, 57, 28, 6], [55, 54, 58, 69, 38, 10], [21, \"_\", 19, 44, 51, 18]]]", "A*_args": "[\"[[93, 81, 68, 57, 28, 6], [55, 54, 58, 69, 38, 10], [21, '_', 19, 44, 51, 18]]\"]"}
{"diff_sorted_id": "92", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[92, 79, 74, 46, 64, 44], [39, 59, 75, 26, 47, 73], [29, 53, 56, '_', 16, 17]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[26, 47, 73, 44, 64, 73, 16, 17, 44, 64, 73, 46, 74, 75, 56, 53, 29, 39, 59, 56, 53, 26, 17, 16, 46, 73, 64, 44]", "opt_solution_cost": "28", "opt_solution_compute_t": "0.7006855010986328", "solution_depth": "28", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[92, 79, 74, 46, 64, 44], [39, 59, 75, 26, 47, 73], [29, 53, 56, \"_\", 16, 17]]]", "is_correct_args": "[[[92, 79, 74, 46, 64, 44], [39, 59, 75, 26, 47, 73], [29, 53, 56, \"_\", 16, 17]]]", "A*_args": "[\"[[92, 79, 74, 46, 64, 44], [39, 59, 75, 26, 47, 73], [29, 53, 56, '_', 16, 17]]\"]"}
{"diff_sorted_id": "93", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[94, 87, 69, 81, 4, 79], ['_', 35, 86, 61, 57, 75], [41, 18, 65, 9, 53, 55]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[94, 87, 69, 86, 65, 18, 35, 69, 87, 94, 69, 65, 61, 57, 4, 79, 75, 55, 53, 4, 55, 53]", "opt_solution_cost": "22", "opt_solution_compute_t": "0.032526254653930664", "solution_depth": "22", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[94, 87, 69, 81, 4, 79], [\"_\", 35, 86, 61, 57, 75], [41, 18, 65, 9, 53, 55]]]", "is_correct_args": "[[[94, 87, 69, 81, 4, 79], [\"_\", 35, 86, 61, 57, 75], [41, 18, 65, 9, 53, 55]]]", "A*_args": "[\"[[94, 87, 69, 81, 4, 79], ['_', 35, 86, 61, 57, 75], [41, 18, 65, 9, 53, 55]]\"]"}
{"diff_sorted_id": "94", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[98, 30, 85, 44, 59, 40], [56, 68, 50, 61, 47, 15], [37, 48, 24, 81, 22, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[15, 40, 59, 44, 61, 50, 68, 30, 85, 68, 50, 81, 24, 48, 30, 50, 81, 47, 44, 61, 68, 81, 48, 24, 22, 15]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.07562923431396484", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[98, 30, 85, 44, 59, 40], [56, 68, 50, 61, 47, 15], [37, 48, 24, 81, 22, \"_\"]]]", "is_correct_args": "[[[98, 30, 85, 44, 59, 40], [56, 68, 50, 61, 47, 15], [37, 48, 24, 81, 22, \"_\"]]]", "A*_args": "[\"[[98, 30, 85, 44, 59, 40], [56, 68, 50, 61, 47, 15], [37, 48, 24, 81, 22, '_']]\"]"}
{"diff_sorted_id": "95", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[92, 72, 91, 79, 62, 24], [93, 67, 65, 63, 83, 74], [41, 34, 29, 27, 58, '_']]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[58, 27, 63, 65, 67, 72, 92, 93, 72, 67, 65, 83, 62, 24, 74, 62, 24, 79, 83, 63, 27, 24, 62, 58]", "opt_solution_cost": "24", "opt_solution_compute_t": "0.20434069633483887", "solution_depth": "24", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[92, 72, 91, 79, 62, 24], [93, 67, 65, 63, 83, 74], [41, 34, 29, 27, 58, \"_\"]]]", "is_correct_args": "[[[92, 72, 91, 79, 62, 24], [93, 67, 65, 63, 83, 74], [41, 34, 29, 27, 58, \"_\"]]]", "A*_args": "[\"[[92, 72, 91, 79, 62, 24], [93, 67, 65, 63, 83, 74], [41, 34, 29, 27, 58, '_']]\"]"}
{"diff_sorted_id": "96", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[99, 98, 87, 84, 72, 64], [60, 59, 19, 57, '_', 53], [33, 22, 18, 48, 16, 37]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "5", "opt_solution": "[53, 37, 16, 48, 18, 19, 57, 53, 48, 16]", "opt_solution_cost": "10", "opt_solution_compute_t": "0.02994561195373535", "solution_depth": "10", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[99, 98, 87, 84, 72, 64], [60, 59, 19, 57, \"_\", 53], [33, 22, 18, 48, 16, 37]]]", "is_correct_args": "[[[99, 98, 87, 84, 72, 64], [60, 59, 19, 57, \"_\", 53], [33, 22, 18, 48, 16, 37]]]", "A*_args": "[\"[[99, 98, 87, 84, 72, 64], [60, 59, 19, 57, '_', 53], [33, 22, 18, 48, 16, 37]]\"]"}
{"diff_sorted_id": "97", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[100, 96, 93, 82, 6, 19], [68, 53, 50, 9, '_', 24], [16, 15, 48, 10, 76, 74]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[6, 82, 93, 50, 48, 10, 76, 74, 24, 6, 74, 76, 9, 48, 50, 93, 82, 74, 76, 24, 6, 19, 74, 76, 24, 6]", "opt_solution_cost": "26", "opt_solution_compute_t": "1.0652458667755127", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[100, 96, 93, 82, 6, 19], [68, 53, 50, 9, \"_\", 24], [16, 15, 48, 10, 76, 74]]]", "is_correct_args": "[[[100, 96, 93, 82, 6, 19], [68, 53, 50, 9, \"_\", 24], [16, 15, 48, 10, 76, 74]]]", "A*_args": "[\"[[100, 96, 93, 82, 6, 19], [68, 53, 50, 9, '_', 24], [16, 15, 48, 10, 76, 74]]\"]"}
{"diff_sorted_id": "98", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[89, 88, 62, 57, 79, 53], [92, 48, 61, 67, 78, 14], [32, 63, 27, '_', 19, 54]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[19, 54, 14, 78, 67, 61, 62, 88, 89, 92, 48, 63, 32, 48, 63, 62, 61, 57, 79, 67, 78, 53, 67, 78, 54, 14]", "opt_solution_cost": "26", "opt_solution_compute_t": "0.06994152069091797", "solution_depth": "26", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[89, 88, 62, 57, 79, 53], [92, 48, 61, 67, 78, 14], [32, 63, 27, \"_\", 19, 54]]]", "is_correct_args": "[[[89, 88, 62, 57, 79, 53], [92, 48, 61, 67, 78, 14], [32, 63, 27, \"_\", 19, 54]]]", "A*_args": "[\"[[89, 88, 62, 57, 79, 53], [92, 48, 61, 67, 78, 14], [32, 63, 27, '_', 19, 54]]\"]"}
{"diff_sorted_id": "99", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[92, 75, 100, 61, 43, 87], [64, 34, 55, 90, 20, 86], [36, '_', 32, 5, 42, 83]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[34, 64, 92, 75, 100, 61, 90, 20, 43, 87, 86, 83, 42, 5, 20, 55, 64, 92, 75, 100, 92, 64, 61, 90, 87, 86, 83, 42]", "opt_solution_cost": "28", "opt_solution_compute_t": "0.13985705375671387", "solution_depth": "28", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[92, 75, 100, 61, 43, 87], [64, 34, 55, 90, 20, 86], [36, \"_\", 32, 5, 42, 83]]]", "is_correct_args": "[[[92, 75, 100, 61, 43, 87], [64, 34, 55, 90, 20, 86], [36, \"_\", 32, 5, 42, 83]]]", "A*_args": "[\"[[92, 75, 100, 61, 43, 87], [64, 34, 55, 90, 20, 86], [36, '_', 32, 5, 42, 83]]\"]"}
{"diff_sorted_id": "100", "problem_statement": "In the 8-puzzle game, you are given a grid with numbered square tiles arranged randomly and one tile missing. The goal is to arrange the tiles in descending order by sliding them into the empty space. The tiles can move in 4 directions: left, right, up, and down.  Given the initial state of the puzzle below, where the empty spot is represented as \u201c_\u201d, provide the shortest list of tiles that need to be swapped with the empty spot to achieve the goal state. The goal state is when all tiles are in descending order, with the largest number in the top left corner, and the empty spot is in the bottom right corner. The solution should be a list of numbers in Python format, where each number represents the number on the tile that the empty spot is swapped with at each turn. Initial state of the puzzle: [[94, 91, 76, '_', 74, 29], [61, 93, 17, 37, 34, 44], [67, 32, 55, 19, 26, 69]]", "problem_type": "8_puzzle", "problem_category": "puzzle", "relative_diff_score": "6", "opt_solution": "[37, 17, 55, 19, 26, 34, 44, 29, 74, 44, 29, 69, 34, 29, 17, 26, 29, 17, 44, 37, 76, 55, 19, 29, 26, 19, 55, 91, 93, 61, 67, 32, 29, 26, 19, 44, 37, 74, 69, 34]", "opt_solution_cost": "40", "opt_solution_compute_t": "21.31004285812378", "solution_depth": "40", "max_successor_states": "4", "num_vars_per_state": "18", "is_feasible_args": "[[[94, 91, 76, \"_\", 74, 29], [61, 93, 17, 37, 34, 44], [67, 32, 55, 19, 26, 69]]]", "is_correct_args": "[[[94, 91, 76, \"_\", 74, 29], [61, 93, 17, 37, 34, 44], [67, 32, 55, 19, 26, 69]]]", "A*_args": "[\"[[94, 91, 76, '_', 74, 29], [61, 93, 17, 37, 34, 44], [67, 32, 55, 19, 26, 69]]\"]"}
