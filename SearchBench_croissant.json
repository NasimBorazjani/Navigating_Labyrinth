{
  "@context": {
    "@language": "en",
    "@vocab": "https://schema.org/",
    "citeAs": "cr:citeAs",
    "column": "cr:column",
    "conformsTo": "dct:conformsTo",
    "cr": "http://mlcommons.org/croissant/",
    "rai": "http://mlcommons.org/croissant/RAI/",
    "data": {
      "@id": "cr:data",
      "@type": "@json"
    },
    "dataType": {
      "@id": "cr:dataType",
      "@type": "@vocab"
    },
    "dct": "http://purl.org/dc/terms/",
    "examples": {
      "@id": "cr:examples",
      "@type": "@json"
    },
    "extract": "cr:extract",
    "field": "cr:field",
    "fileProperty": "cr:fileProperty",
    "fileObject": "cr:fileObject",
    "fileSet": "cr:fileSet",
    "format": "cr:format",
    "includes": "cr:includes",
    "isLiveDataset": "cr:isLiveDataset",
    "jsonPath": "cr:jsonPath",
    "key": "cr:key",
    "md5": "cr:md5",
    "parentField": "cr:parentField",
    "path": "cr:path",
    "recordSet": "cr:recordSet",
    "references": "cr:references",
    "regex": "cr:regex",
    "repeated": "cr:repeated",
    "replace": "cr:replace",
    "sc": "https://schema.org/",
    "separator": "cr:separator",
    "source": "cr:source",
    "subField": "cr:subField",
    "transform": "cr:transform"
  },
  "@type": "sc:Dataset",
  "name": "SearchBench",
  "description": "SearchBench is designed to evaluate the performance of LLMs in solving state-based problems that involve combinatorial search and optimization. It is motivated by the observation that LLMs often struggle with multi-step compositional reasoning, combinatorial problems, and planning. The problem types included in SearchBench are predominantly NP-hard, requiring systematic exploration of action paths and backtracking to intermediate feasible states for resolution. As a result, SearchBench targets some of the inherent limitations of the autoregressive architecture of LLMs, which necessitates generating solutions in a sequential manner. SearchBench provides a rigorous assessment of LLMs' capabilities in designing new algorithms to solve complex problems. It also investigates the non-linear reasoning capability of LLMs to solve search problems end-to-end using text only.",
  "conformsTo": "http://mlcommons.org/croissant/1.0",
  "citeAs": "in submission",
  "license": "CC BY-SA",
  "url": "https://github.com/NasimBorazjani/Navigating_Labyrinth.git",
  "distribution": [
    {
      "@type": "cr:FileObject",
      "@id": "github-repository",
      "name": "github-repository",
      "description": "Navigating Labyrinth repository on GitHub.",
      "contentUrl": "https://github.com/NasimBorazjani/Navigating_Labyrinth.git",
      "encodingFormat": "git+https",
      "sha256": "main"
    },
    {
      "@type": "cr:FileSet",
      "@id": "jsonl-files",
      "name": "jsonl-files",
      "description": "JSONL files are hosted on the GitHub repository.",
      "containedIn": {
        "@id": "github-repository"
      },
      "encodingFormat": "application/jsonlines",
      "includes": "data/*.jsonl"
    }
  ],
  "recordSet": [
    {
      "@type": "cr:RecordSet",
      "@id": "jsonl",
      "name": "jsonl",
      "field": [
        {
          "@type": "cr:Field",
          "@id": "jsonl/diff_sorted_id",
          "name": "diff_sorted_id",
          "description": "A unique TEXT identifier assigned to each problem instance within a specific problem type.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "diff_sorted_id"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/problem_statement",
          "name": "problem_statement",
          "description": "A natural language description that outlines the problem to be solved; the only feild of each instance that must be presented to the agent (the LLM).",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "problem_statement"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/problem_type",
          "name": "problem_type",
          "description": "Indicates the problem type, out of 11 problem types in SearchBench, that this particular problem is an instance of.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "problem_type"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/problem_category",
          "name": "problem_category",
          "description": "The specific category, out of the five predefined problem categories in SearchBench, to which this problem belongs.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "problem_category"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/relative_diff_score",
          "name": "relative_diff_score",
          "description": "A TEXT score that indicates the difficulty of this problem instance relative to other instances within the same problem type.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "relative_diff_score"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/opt_solution",
          "name": "opt_solution",
          "description": "A list of actions that, starting from the given initial state, lead to the goal state with the minimum cost as defined in the problem.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "opt_solution"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/opt_solution_cost",
          "name": "opt_solution_cost",
          "description": "The cost of the optimal solution for this problem instance.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "opt_solution_cost"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/opt_solution_compute_t",
          "name": "opt_solution_compute_t",
          "description": "The time, in seconds, that our instance-agnostic A* implementation for the problem type took to solve this specific problem instance.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "opt_solution_compute_t"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/solution_depth",
          "name": "solution_depth",
          "description": "The number of actions required to reach the goal state from the given initial state with the minimum cost.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "solution_depth"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/max_successor_states",
          "name": "max_successor_states",
          "description": "The maximum number of successor states that can be reached from any given state in this problem.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "max_successor_states"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/num_vars_per_state",
          "name": "num_vars_per_state",
          "description": "An upper bound on the number of variables in each state of the problem.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "num_vars_per_state"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/is_feasible_args",
          "name": "is_feasible_args",
          "description": "A list of variables of the problem instance that must be passed to the \u2018is_feasible\u2019 function of the evaluation pipeline to determine whether a suggested solution adheres to the rules and constraints of the problem.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "is_feasible_args"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/is_correct_args",
          "name": "is_correct_args",
          "description": "A list of variables in the problem statement of this instance that must be passed as arguments to the 'is_correct' function in the evaluation pipeline, in order to evaluate the correctness of a suggested solution.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "is_correct_args"
            }
          }
        },
        {
          "@type": "cr:Field",
          "@id": "jsonl/A*_args",
          "name": "A*_args",
          "description": "Variables of this problem instance that must be passed to our A* implementation for the problem type to obtain the optimal solution for the instance.",
          "dataType": "sc:Text",
          "source": {
            "fileSet": {
              "@id": "jsonl-files"
            },
            "extract": {
              "column": "A*_args"
            }
          }
        }
      ]
    }
  ]
}
